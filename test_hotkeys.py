#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
"""

import tkinter as tk
from tkinter import ttk
import platform

def create_test_window():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ —Å –≥–æ—Ä—è—á–∏–º–∏ –∫–ª–∞–≤–∏—à–∞–º–∏"""
    root = tk.Tk()
    root.title("–¢–µ—Å—Ç –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à")
    root.geometry("500x400")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    is_macos = platform.system() == "Darwin"
    modifier = "Command" if is_macos else "Control"

    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    instructions = f"""
–¢–µ—Å—Ç –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –¥–ª—è {platform.system()}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏:
‚Ä¢ {modifier}+C - –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
‚Ä¢ {modifier}+V - –í—Å—Ç–∞–≤–∏—Ç—å
‚Ä¢ {modifier}+X - –í—ã—Ä–µ–∑–∞—Ç—å
‚Ä¢ {modifier}+A - –í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ

–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª—è –Ω–∏–∂–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à:
"""

    ttk.Label(root, text=instructions, font=("Arial", 11)).pack(pady=10, padx=10)

    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è
    ttk.Label(root, text="Entry –ø–æ–ª–µ:").pack(anchor="w", padx=10)
    entry = ttk.Entry(root, width=50)
    entry.pack(pady=5, padx=10, fill="x")
    entry.insert(0, "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Entry")

    ttk.Label(root, text="Text –ø–æ–ª–µ:").pack(anchor="w", padx=10, pady=(10,0))
    text = tk.Text(root, height=8, width=50)
    text.pack(pady=5, padx=10, fill="both", expand=True)
    text.insert("1.0", "–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Text –≤–∏–¥–∂–µ—Ç–∞\n–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞\n–¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞")

    # –°—Ç–∞—Ç—É—Å
    status = tk.StringVar()
    status_label = ttk.Label(root, textvariable=status, font=("Arial", 9), foreground="blue")
    status_label.pack(pady=5)

    def setup_hotkeys():
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        def copy_handler(event):
            try:
                focused = root.focus_get()
                if focused == entry:
                    if entry.selection_present():
                        text_to_copy = entry.selection_get()
                    else:
                        text_to_copy = entry.get()
                elif focused == text:
                    if text.tag_ranges("sel"):
                        text_to_copy = text.get("sel.first", "sel.last")
                    else:
                        text_to_copy = text.get("1.0", "end-1c")
                else:
                    return

                root.clipboard_clear()
                root.clipboard_append(text_to_copy)
                status.set(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç: {len(text_to_copy)} —Å–∏–º–≤–æ–ª–æ–≤")
                root.after(2000, lambda: status.set(""))
                return "break"
            except Exception as e:
                status.set(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                return "break"

        def paste_handler(event):
            try:
                text_to_paste = root.clipboard_get()
                focused = root.focus_get()

                if focused == entry:
                    if entry.selection_present():
                        entry.delete("sel.first", "sel.last")
                    entry.insert("insert", text_to_paste)
                elif focused == text:
                    if text.tag_ranges("sel"):
                        text.delete("sel.first", "sel.last")
                    text.insert("insert", text_to_paste)

                status.set(f"–í—Å—Ç–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç: {len(text_to_paste)} —Å–∏–º–≤–æ–ª–æ–≤")
                root.after(2000, lambda: status.set(""))
                return "break"
            except Exception as e:
                status.set(f"–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏: {e}")
                return "break"

        def cut_handler(event):
            try:
                focused = root.focus_get()
                if focused == entry:
                    if entry.selection_present():
                        text_to_cut = entry.selection_get()
                        root.clipboard_clear()
                        root.clipboard_append(text_to_cut)
                        entry.delete("sel.first", "sel.last")
                        status.set(f"–í—ã—Ä–µ–∑–∞–Ω —Ç–µ–∫—Å—Ç: {len(text_to_cut)} —Å–∏–º–≤–æ–ª–æ–≤")
                elif focused == text:
                    if text.tag_ranges("sel"):
                        text_to_cut = text.get("sel.first", "sel.last")
                        root.clipboard_clear()
                        root.clipboard_append(text_to_cut)
                        text.delete("sel.first", "sel.last")
                        status.set(f"–í—ã—Ä–µ–∑–∞–Ω —Ç–µ–∫—Å—Ç: {len(text_to_cut)} —Å–∏–º–≤–æ–ª–æ–≤")

                root.after(2000, lambda: status.set(""))
                return "break"
            except Exception as e:
                status.set(f"–û—à–∏–±–∫–∞ –≤—ã—Ä–µ–∑–∞–Ω–∏—è: {e}")
                return "break"

        def select_all_handler(event):
            try:
                focused = root.focus_get()
                if focused == entry:
                    entry.select_range(0, 'end')
                elif focused == text:
                    text.tag_add("sel", "1.0", "end-1c")
                    text.mark_set("insert", "1.0")
                    text.see("insert")

                status.set("–í–µ—Å—å —Ç–µ–∫—Å—Ç –≤—ã–¥–µ–ª–µ–Ω")
                root.after(2000, lambda: status.set(""))
                return "break"
            except Exception as e:
                status.set(f"–û—à–∏–±–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è: {e}")
                return "break"

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        if is_macos:
            root.bind_all("<Command-c>", copy_handler)
            root.bind_all("<Command-v>", paste_handler)
            root.bind_all("<Command-x>", cut_handler)
            root.bind_all("<Command-a>", select_all_handler)
        else:
            root.bind_all("<Control-c>", copy_handler)
            root.bind_all("<Control-v>", paste_handler)
            root.bind_all("<Control-x>", cut_handler)
            root.bind_all("<Control-a>", select_all_handler)

        status.set("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
    setup_hotkeys()

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
    entry.focus_set()

    return root

if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à...")
    print(f"üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.system()}")

    root = create_test_window()

    print("‚úÖ –û–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à.")
    print("‚ùå –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è macOS")

    root.mainloop()
