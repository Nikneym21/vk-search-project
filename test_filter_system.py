#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤—Å—é —Å–∏—Å—Ç–µ–º—É –ø–ª–∞–≥–∏–Ω–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
"""

import sys
import os
import json
import pandas as pd
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from core.plugin_manager import PluginManager

def load_csv_as_posts(csv_file):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç CSV —Ñ–∞–π–ª –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å—Ç–æ–≤"""
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º {csv_file}...")
    
    try:
        df = pd.read_csv(csv_file)
        print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å—Ç–æ–≤ (–∫–∞–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç VK API)
        posts = []
        for _, row in df.iterrows():
            post = {
                'id': row.get('id', 0),
                'owner_id': row.get('owner_id', 0),
                'text': row.get('text', ''),
                'date': row.get('date', 0),
                'likes': {'count': row.get('likes', 0)},
                'comments': {'count': row.get('comments', 0)},
                'reposts': {'count': row.get('reposts', 0)},
                'views': {'count': row.get('views', 0)}
            }
            posts.append(post)
        
        print(f"   –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ {len(posts)} –ø–æ—Å—Ç–æ–≤")
        return posts
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {csv_file}: {e}")
        return []

def load_meta_data(meta_file):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ meta.json —Ñ–∞–π–ª–∞"""
    try:
        with open(meta_file, 'r', encoding='utf-8') as f:
            meta = json.load(f)
        return meta
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {meta_file}: {e}")
        return None

async def test_filter_system():
    """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤—Å—é —Å–∏—Å—Ç–µ–º—É"""
    print("üß™ –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –ø–ª–∞–≥–∏–Ω–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PluginManager
    pm = PluginManager()
    pm.load_plugins()
    pm.initialize_plugins()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–ª–∞–≥–∏–Ω–æ–≤
    filter_plugin = pm.get_plugin('filter')
    if not filter_plugin:
        print("‚ùå FilterPlugin –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print("‚úÖ FilterPlugin –∑–∞–≥—Ä—É–∂–µ–Ω")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    meta_files = [
        'data/results/search_20250726_045350.meta.json',
        'data/results/search_20250726_051718.meta.json'
    ]
    
    all_keywords = []
    all_posts = []
    
    for meta_file in meta_files:
        meta = load_meta_data(meta_file)
        if meta:
            keywords = meta.get('keywords', [])
            csv_file = meta.get('filepath', '')
            expected_count = meta.get('count', 0)
            
            print(f"\nüìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ {meta_file}:")
            print(f"   –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {expected_count} –ø–æ—Å—Ç–æ–≤")
            print(f"   –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(keywords)}")
            print(f"   Exact match: {meta.get('exact_match', False)}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ CSV
            if csv_file and os.path.exists(csv_file):
                posts = load_csv_as_posts(csv_file)
                all_posts.extend(posts)
                all_keywords.extend(keywords)
                
                print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")
    
    print(f"\nüìä –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"   –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(all_posts)}")
    print(f"   –í—Å–µ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(all_keywords)}")
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    unique_keywords = list(set(all_keywords))
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(unique_keywords)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    print(f"\nüîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:")
    for i, keyword in enumerate(unique_keywords[:10], 1):
        print(f"   {i}. {keyword}")
    if len(unique_keywords) > 10:
        print(f"   ... –∏ –µ—â–µ {len(unique_keywords) - 10} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É
    print(f"\nüîç –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É:")
    try:
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º (–∫–∞–∫ –≤ meta.json)
        print("   –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å exact_match=True...")
        filtered_posts_exact = await filter_plugin.filter_posts_comprehensive_parallel(
            all_posts, unique_keywords, exact_match=True
        )
        
        print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç (exact_match=True): {len(filtered_posts_exact)} –ø–æ—Å—Ç–æ–≤")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
        print("   –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å exact_match=False...")
        filtered_posts_partial = await filter_plugin.filter_posts_comprehensive_parallel(
            all_posts, unique_keywords, exact_match=False
        )
        
        print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç (exact_match=False): {len(filtered_posts_partial)} –ø–æ—Å—Ç–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        if filtered_posts_partial:
            print(f"\nüìù –ü—Ä–∏–º–µ—Ä—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:")
            for i, post in enumerate(filtered_posts_partial[:3]):
                text = post.get('text', '')[:100]
                owner_id = post.get('owner_id', 0)
                post_id = post.get('id', 0)
                print(f"   {i+1}. [ID: {owner_id}_{post_id}] {text}...")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        expected_total = 825 + 365  # –ò–∑ meta.json —Ñ–∞–π–ª–æ–≤
        actual_exact = len(filtered_posts_exact)
        actual_partial = len(filtered_posts_partial)
        
        print(f"\nüéØ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:")
        print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å (–∏–∑ meta.json): {expected_total} –ø–æ—Å—Ç–æ–≤")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ (exact_match=True): {actual_exact} –ø–æ—Å—Ç–æ–≤")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ (exact_match=False): {actual_partial} –ø–æ—Å—Ç–æ–≤")
        print(f"   –†–∞–∑–Ω–∏—Ü–∞ (exact): {actual_exact - expected_total}")
        print(f"   –†–∞–∑–Ω–∏—Ü–∞ (partial): {actual_partial - expected_total}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–ø–µ—Ä–≤—ã–µ 5):")
        for keyword in unique_keywords[:5]:
            keyword_posts = []
            for post in all_posts:
                text = filter_plugin._extract_post_text(post)
                if filter_plugin._check_keyword_match(text, keyword, exact_match=False):
                    keyword_posts.append(post)
            print(f"   '{keyword}': {len(keyword_posts)} –ø–æ—Å—Ç–æ–≤")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
    pm.shutdown_plugins()
    print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    asyncio.run(test_filter_system()) 