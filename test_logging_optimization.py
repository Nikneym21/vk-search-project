#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import time
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
from src.core.plugin_manager import PluginManager

async def test_small_volume_logging():
    """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("üìù –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞ (5 –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑)")
    print("=" * 60)
    
    pm = PluginManager()
    pm.load_plugins()
    pm.initialize_plugins()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    keywords = ['–Ω–æ–≤–æ—Å—Ç–∏', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', 'python', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞']
    start_date = '24.07.2025'
    end_date = '24.07.2025'
    
    start_time = time.time()
    
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å –æ–±—ã—á–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º...")
        
        results = await pm.coordinate_search_and_filter(
            keywords, start_date, end_date, exact_match=False
        )
        
        execution_time = time.time() - start_time
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(results)}")
        print(f"   –ö–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑: {len(keywords)}")
        print(f"   –†–µ–∂–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –û–±—ã—á–Ω—ã–π")
        
        pm.shutdown_plugins()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        pm.shutdown_plugins()

async def test_large_volume_logging():
    """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìù –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞ (50 –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑)")
    print("=" * 60)
    
    pm = PluginManager()
    pm.load_plugins()
    pm.initialize_plugins()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–æ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑
    keywords = [
        '–Ω–æ–≤–æ—Å—Ç–∏', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', 'python', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
        'web', 'mobile', 'ai', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', 'data science',
        'javascript', 'react', 'vue', 'angular', 'nodejs',
        'java', 'kotlin', 'swift', 'android', 'ios',
        'docker', 'kubernetes', 'aws', 'azure', 'gcp',
        'sql', 'nosql', 'mongodb', 'postgresql', 'redis',
        'git', 'github', 'gitlab', 'ci', 'cd',
        'agile', 'scrum', 'kanban', 'devops', 'microservices',
        'blockchain', 'cryptocurrency', 'bitcoin', 'ethereum', 'defi',
        'cybersecurity', 'penetration testing', 'vulnerability', 'threat', 'security'
    ]
    
    start_date = '24.07.2025'
    end_date = '24.07.2025'
    
    start_time = time.time()
    
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º...")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑: {len(keywords)}")
        
        results = await pm.coordinate_search_and_filter(
            keywords, start_date, end_date, exact_match=False
        )
        
        execution_time = time.time() - start_time
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(results)}")
        print(f"   –ö–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑: {len(keywords)}")
        print(f"   –†–µ–∂–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤")
        
        pm.shutdown_plugins()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        pm.shutdown_plugins()

async def test_extreme_volume_logging():
    """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìù –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–º–∞ (100+ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑)")
    print("=" * 60)
    
    pm = PluginManager()
    pm.load_plugins()
    pm.initialize_plugins()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑
    base_keywords = [
        '–Ω–æ–≤–æ—Å—Ç–∏', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', 'python', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
        'web', 'mobile', 'ai', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', 'data science',
        'javascript', 'react', 'vue', 'angular', 'nodejs',
        'java', 'kotlin', 'swift', 'android', 'ios',
        'docker', 'kubernetes', 'aws', 'azure', 'gcp',
        'sql', 'nosql', 'mongodb', 'postgresql', 'redis',
        'git', 'github', 'gitlab', 'ci', 'cd',
        'agile', 'scrum', 'kanban', 'devops', 'microservices',
        'blockchain', 'cryptocurrency', 'bitcoin', 'ethereum', 'defi',
        'cybersecurity', 'penetration testing', 'vulnerability', 'threat', 'security'
    ]
    
    # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑
    keywords = []
    for i, base in enumerate(base_keywords):
        keywords.append(base)
        keywords.append(f"{base} 2025")
        keywords.append(f"–Ω–æ–≤–æ—Å—Ç–∏ {base}")
        if i < 20:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∞
            keywords.append(f"—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ {base}")
    
    start_date = '24.07.2025'
    end_date = '24.07.2025'
    
    start_time = time.time()
    
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º –æ–±—ä–µ–º–æ–º...")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑: {len(keywords)}")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∞
        test_keywords = keywords[:50]
        
        results = await pm.coordinate_search_and_filter(
            test_keywords, start_date, end_date, exact_match=False
        )
        
        execution_time = time.time() - start_time
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(results)}")
        print(f"   –ö–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑: {len(test_keywords)}")
        print(f"   –†–µ–∂–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º")
        
        pm.shutdown_plugins()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        pm.shutdown_plugins()

if __name__ == "__main__":
    print("üéØ –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(test_small_volume_logging())
    asyncio.run(test_large_volume_logging())
    asyncio.run(test_extreme_volume_logging())
    
    print("\n" + "=" * 60)
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("   üîπ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
    print("   üîπ –ë–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã: Batch –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, rate limiting")
    print("   üîπ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π: –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–æ–ª—å–∫–æ —Å–≤–æ–¥–∫–∏") 