#!/usr/bin/env python3
"""
TODO Manager - –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
- –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á
- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
- –û—Ç–º–µ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Optional

class TodoManager:
    def __init__(self, todo_file: str = "todo_tasks.json"):
        self.todo_file = todo_file
        self.tasks = self.load_tasks()
    
    def load_tasks(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.todo_file):
            try:
                with open(self.todo_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                return self.get_default_structure()
        return self.get_default_structure()
    
    def save_tasks(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏ –≤ —Ñ–∞–π–ª"""
        with open(self.todo_file, 'w', encoding='utf-8') as f:
            json.dump(self.tasks, f, ensure_ascii=False, indent=2)
    
    def get_default_structure(self) -> Dict:
        """–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "pinned": {
                "critical": [],
                "important": []
            },
            "active": {
                "technical": [],
                "documentation": [],
                "cleanup": []
            },
            "completed": [],
            "statistics": {
                "total": 0,
                "completed": 0,
                "pinned": 0
            }
        }
    
    def add_task(self, task: str, category: str = "active", subcategory: str = "technical", 
                 priority: str = "normal", pinned: bool = False):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"""
        task_obj = {
            "id": len(self.tasks["active"].get(subcategory, [])) + len(self.tasks["pinned"].get(subcategory, [])) + 1,
            "text": task,
            "created": datetime.now().isoformat(),
            "completed": False,
            "priority": priority
        }
        
        if pinned:
            if subcategory not in self.tasks["pinned"]:
                self.tasks["pinned"][subcategory] = []
            self.tasks["pinned"][subcategory].append(task_obj)
        else:
            if subcategory not in self.tasks["active"]:
                self.tasks["active"][subcategory] = []
            self.tasks["active"][subcategory].append(task_obj)
        
        self.update_statistics()
        self.save_tasks()
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task}")
    
    def complete_task(self, task_id: int, category: str = "active", subcategory: str = "technical"):
        """–û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
        if category == "pinned":
            tasks = self.tasks["pinned"].get(subcategory, [])
        else:
            tasks = self.tasks["active"].get(subcategory, [])
        
        for task in tasks:
            if task["id"] == task_id:
                task["completed"] = True
                task["completed_at"] = datetime.now().isoformat()
                self.tasks["completed"].append(task)
                tasks.remove(task)
                self.update_statistics()
                self.save_tasks()
                print(f"üéâ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {task['text']}")
                return
        
        print(f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    def pin_task(self, task_id: int, subcategory: str = "technical"):
        """–ó–∞–∫—Ä–µ–ø–∏—Ç—å –∑–∞–¥–∞—á—É"""
        tasks = self.tasks["active"].get(subcategory, [])
        for task in tasks:
            if task["id"] == task_id:
                tasks.remove(task)
                if subcategory not in self.tasks["pinned"]:
                    self.tasks["pinned"][subcategory] = []
                self.tasks["pinned"][subcategory].append(task)
                self.update_statistics()
                self.save_tasks()
                print(f"üìå –ó–∞–¥–∞—á–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞: {task['text']}")
                return
        
        print(f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    def unpin_task(self, task_id: int, subcategory: str = "technical"):
        """–û—Ç–∫—Ä–µ–ø–∏—Ç—å –∑–∞–¥–∞—á—É"""
        tasks = self.tasks["pinned"].get(subcategory, [])
        for task in tasks:
            if task["id"] == task_id:
                tasks.remove(task)
                if subcategory not in self.tasks["active"]:
                    self.tasks["active"][subcategory] = []
                self.tasks["active"][subcategory].append(task)
                self.update_statistics()
                self.save_tasks()
                print(f"üìå –ó–∞–¥–∞—á–∞ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∞: {task['text']}")
                return
        
        print(f"‚ùå –ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    def update_statistics(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total = 0
        completed = len(self.tasks["completed"])
        pinned = 0
        
        for category in self.tasks["active"].values():
            total += len(category)
        
        for category in self.tasks["pinned"].values():
            total += len(category)
            pinned += len(category)
        
        self.tasks["statistics"] = {
            "total": total,
            "completed": completed,
            "pinned": pinned
        }
    
    def show_tasks(self, show_completed: bool = False):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏"""
        print("\n" + "="*60)
        print("üìã –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–î–ê–ß–ê–ú–ò")
        print("="*60)
        
        # –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        print("\nüéØ –ó–ê–ö–†–ï–ü–õ–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò:")
        for priority, tasks in self.tasks["pinned"].items():
            if tasks:
                print(f"\nüî¥ {priority.upper()}:")
                for task in tasks:
                    status = "‚úÖ" if task["completed"] else "‚è≥"
                    print(f"  {status} [{task['id']}] {task['text']}")
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        print("\nüìù –ê–ö–¢–ò–í–ù–´–ï –ó–ê–î–ê–ß–ò:")
        for category, tasks in self.tasks["active"].items():
            if tasks:
                print(f"\nüîß {category.upper()}:")
                for task in tasks:
                    status = "‚úÖ" if task["completed"] else "‚è≥"
                    priority_icon = "üî¥" if task["priority"] == "critical" else "üü°" if task["priority"] == "important" else "üü¢"
                    print(f"  {status} [{task['id']}] {priority_icon} {task['text']}")
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        if show_completed and self.tasks["completed"]:
            print("\n‚úÖ –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –ó–ê–î–ê–ß–ò:")
            for task in self.tasks["completed"][-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
                print(f"  ‚úÖ [{task['id']}] {task['text']}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = self.tasks["statistics"]
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {stats['total']}")
        print(f"  –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed']}")
        print(f"  –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–æ: {stats['pinned']}")
        if stats['total'] > 0:
            progress = (stats['completed'] / (stats['total'] + stats['completed'])) * 100
            print(f"  –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%")
        
        print("="*60)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    manager = TodoManager()
    
    while True:
        print("\n" + "="*40)
        print("üìã TODO –ú–ï–ù–ï–î–ñ–ï–†")
        print("="*40)
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏")
        print("2. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
        print("3. –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É")
        print("4. –ó–∞–∫—Ä–µ–ø–∏—Ç—å –∑–∞–¥–∞—á—É")
        print("5. –û—Ç–∫—Ä–µ–ø–∏—Ç—å –∑–∞–¥–∞—á—É")
        print("6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-6): ").strip()
        
        if choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        elif choice == "1":
            show_completed = input("–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏? (y/n): ").lower() == 'y'
            manager.show_tasks(show_completed)
        elif choice == "2":
            task = input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É: ").strip()
            if task:
                category = input("–ö–∞—Ç–µ–≥–æ—Ä–∏—è (active/pinned): ").strip() or "active"
                subcategory = input("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è (technical/documentation/cleanup): ").strip() or "technical"
                priority = input("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (normal/important/critical): ").strip() or "normal"
                pinned = input("–ó–∞–∫—Ä–µ–ø–∏—Ç—å? (y/n): ").lower() == 'y'
                manager.add_task(task, category, subcategory, priority, pinned)
        elif choice == "3":
            task_id = input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: ").strip()
            if task_id.isdigit():
                category = input("–ö–∞—Ç–µ–≥–æ—Ä–∏—è (active/pinned): ").strip() or "active"
                subcategory = input("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ").strip() or "technical"
                manager.complete_task(int(task_id), category, subcategory)
        elif choice == "4":
            task_id = input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è: ").strip()
            if task_id.isdigit():
                subcategory = input("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ").strip() or "technical"
                manager.pin_task(int(task_id), subcategory)
        elif choice == "5":
            task_id = input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è: ").strip()
            if task_id.isdigit():
                subcategory = input("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ").strip() or "technical"
                manager.unpin_task(int(task_id), subcategory)
        elif choice == "6":
            manager.show_tasks()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

if __name__ == "__main__":
    main() 