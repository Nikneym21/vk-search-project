#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É –∏ —Å—Å—ã–ª–∫–∞–º
"""

import sys
import os
import pandas as pd
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def test_filter_plugin():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        from src.plugins.filter.filter_plugin import FilterPlugin
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω
        filter_plugin = FilterPlugin()
        filter_plugin.initialize()
        
        print("‚úÖ FilterPlugin –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_posts = [
            {
                'id': 1,
                'owner_id': -123456,
                'text': '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç 1',
                'date': 1640995200,
                'likes': {'count': 10},
                'comments': {'count': 5},
                'reposts': {'count': 2},
                'views': {'count': 100}
            },
            {
                'id': 2,
                'owner_id': -123456,
                'text': '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç 2',
                'date': 1640995200,
                'likes': {'count': 15},
                'comments': {'count': 8},
                'reposts': {'count': 3},
                'views': {'count': 150}
            },
            {
                'id': 1,
                'owner_id': -123456,
                'text': '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç 1',  # –î—É–±–ª–∏–∫–∞—Ç
                'date': 1640995200,
                'likes': {'count': 10},
                'comments': {'count': 5},
                'reposts': {'count': 2},
                'views': {'count': 100}
            },
            {
                'id': 3,
                'owner_id': -789012,
                'text': '–î—Ä—É–≥–æ–π –ø–æ—Å—Ç',
                'date': 1640995200,
                'likes': {'count': 20},
                'comments': {'count': 12},
                'reposts': {'count': 4},
                'views': {'count': 200}
            }
        ]
        
        print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(test_posts)} –ø–æ—Å—Ç–æ–≤")
        
        # –¢–µ—Å—Ç 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        print("\nüîç –¢–µ—Å—Ç 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
        unique_posts = filter_plugin.filter_unique_posts(test_posts)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {len(unique_posts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
        
        for i, post in enumerate(unique_posts):
            print(f"  {i+1}. ID: {post['id']}, Owner: {post['owner_id']}, Text: {post['text'][:50]}...")
        
        # –¢–µ—Å—Ç 2: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        print("\nüîç –¢–µ—Å—Ç 2: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è")
        keywords = ['—Ç–µ—Å—Ç–æ–≤—ã–π', '–ø–æ—Å—Ç']
        filtered_posts = filter_plugin.filter_posts_comprehensive(
            posts=test_posts,
            keywords=keywords,
            exact_match=False,
            use_text_cleaning=True,
            remove_duplicates=True
        )
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {len(filtered_posts)} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
        
        for i, post in enumerate(filtered_posts):
            print(f"  {i+1}. ID: {post['id']}, Owner: {post['owner_id']}, Text: {post['text'][:50]}...")
        
        # –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        print("\nüîç –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        duplicates = filter_plugin.find_duplicates(test_posts)
        print(f"–ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(duplicates)}")
        
        for dup in duplicates:
            print(f"  –î—É–±–ª–∏–∫–∞—Ç: {dup}")
        
        filter_plugin.shutdown()
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

def test_with_real_data():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    try:
        from src.plugins.filter.filter_plugin import FilterPlugin
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        results_dir = "data/results"
        csv_files = [f for f in os.listdir(results_dir) if f.endswith('.csv')]
        
        if not csv_files:
            print("‚ùå –ù–µ—Ç CSV —Ñ–∞–π–ª–æ–≤ –≤ data/results")
            return
        
        # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        latest_file = max(csv_files, key=lambda x: os.path.getctime(os.path.join(results_dir, x)))
        filepath = os.path.join(results_dir, latest_file)
        
        print(f"üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: {latest_file}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = pd.read_csv(filepath)
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
        posts = []
        for _, row in df.iterrows():
            post = {
                'id': hash(row.get('link', '')),
                'owner_id': 0,
                'text': row.get('text', ''),
                'date': 0,
                'likes': {'count': row.get('likes', 0)},
                'comments': {'count': row.get('comments', 0)},
                'reposts': {'count': row.get('reposts', 0)},
                'views': {'count': row.get('views', 0)}
            }
            posts.append(post)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω
        filter_plugin = FilterPlugin()
        filter_plugin.initialize()
        
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(posts)} –ø–æ—Å—Ç–æ–≤ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        unique_posts = filter_plugin.filter_unique_posts(posts)
        print(f"‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {len(unique_posts)}")
        print(f"üìâ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–æ: {len(posts) - len(unique_posts)}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        duplicates = filter_plugin.find_duplicates(posts)
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(duplicates)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        for i, dup_group in enumerate(duplicates[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –≥—Ä—É–ø–ø
            print(f"\n  –ì—Ä—É–ø–ø–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ {i+1}:")
            for dup in dup_group:
                text = dup.get('text', '')[:100]
                print(f"    - {text}...")
        
        filter_plugin.shutdown()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()

def analyze_links_uniqueness():
    """–ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º"""
    try:
        results_dir = "data/results"
        csv_files = [f for f in os.listdir(results_dir) if f.endswith('.csv')]
        
        if not csv_files:
            print("‚ùå –ù–µ—Ç CSV —Ñ–∞–π–ª–æ–≤ –≤ data/results")
            return
        
        # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        latest_file = max(csv_files, key=lambda x: os.path.getctime(os.path.join(results_dir, x)))
        filepath = os.path.join(results_dir, latest_file)
        
        print(f"üîó –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–æ–∫ –≤ —Ñ–∞–π–ª–µ: {latest_file}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = pd.read_csv(filepath)
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–æ–∫
        unique_links = df['link'].nunique()
        print(f"üîó –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {unique_links}")
        print(f"üìâ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å—Å—ã–ª–æ–∫: {len(df) - unique_links}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤
        unique_texts = df['text'].nunique()
        print(f"üìù –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤: {unique_texts}")
        print(f"üìâ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤: {len(df) - unique_texts}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        print("\nüîç –ü—Ä–∏–º–µ—Ä—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å—Å—ã–ª–æ–∫:")
        link_counts = df['link'].value_counts()
        duplicates = link_counts[link_counts > 1]
        
        for link, count in duplicates.head(5).items():
            print(f"  –°—Å—ã–ª–∫–∞: {link}")
            print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏
            texts = df[df['link'] == link]['text'].tolist()
            for i, text in enumerate(texts[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–µ–∫—Å—Ç–∞
                print(f"    {i+1}. {text[:100]}...")
            print()
        
        print("\nüîç –ü—Ä–∏–º–µ—Ä—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤:")
        text_counts = df['text'].value_counts()
        text_duplicates = text_counts[text_counts > 1]
        
        for text, count in text_duplicates.head(3).items():
            print(f"  –¢–µ–∫—Å—Ç: {text[:100]}...")
            print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count}")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            links = df[df['text'] == text]['link'].tolist()
            for i, link in enumerate(links[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å—Å—ã–ª–∫–∏
                print(f"    {i+1}. {link}")
            print()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Å—ã–ª–æ–∫: {e}")
        import traceback
        traceback.print_exc()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞
    test_filter_plugin()
    
    print("\n" + "=" * 50)
    
    # –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    test_with_real_data()
    
    print("\n" + "=" * 50)
    
    # –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å—Å—ã–ª–æ–∫
    analyze_links_uniqueness()

if __name__ == "__main__":
    main() 