#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å—ã—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import sys
import os
import json
import pandas as pd
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from plugins.filter.filter_plugin import FilterPlugin

def load_csv_as_posts(csv_file):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç CSV —Ñ–∞–π–ª –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å—Ç–æ–≤"""
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º {csv_file}...")
    
    try:
        df = pd.read_csv(csv_file)
        print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å—Ç–æ–≤
        posts = []
        for _, row in df.iterrows():
            post = {
                'id': row.get('id', 0),
                'owner_id': row.get('owner_id', 0),
                'text': row.get('text', ''),
                'date': row.get('date', 0),
                'likes': row.get('likes', 0),
                'comments': row.get('comments', 0),
                'reposts': row.get('reposts', 0),
                'views': row.get('views', 0)
            }
            posts.append(post)
        
        print(f"   –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ {len(posts)} –ø–æ—Å—Ç–æ–≤")
        return posts
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {csv_file}: {e}")
        return []

async def test_filter_with_real_data():
    """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üß™ –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≥–∏–Ω
    filter_plugin = FilterPlugin()
    filter_plugin.initialize()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–æ–≤
    csv_files = [
        'search_20250726_045350.csv',
        'search_20250726_051718.csv'
    ]
    
    all_posts = []
    for csv_file in csv_files:
        posts = load_csv_as_posts(csv_file)
        all_posts.extend(posts)
    
    print(f"\nüìä –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ:")
    print(f"   –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(all_posts)}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—Ç–µ –∂–µ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –≤ –ø–∞—Ä—Å–∏–Ω–≥–µ)
    test_keywords = [
        '–õ–∏—Å –ø–µ—Ä–µ–¥–∞–µ—Ç –≤—Å–µ–º –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ',
        '–ü—Ä–∏–≤–µ—Ç —Ä–æ–¥–Ω–æ–π –ë—É—Ä—è—Ç–∏–∏ –æ—Ç —à—Ç—É—Ä–º–æ–≤–∏–∫–æ–≤ —Ç–∞–Ω–∫–æ–≤–æ–π –±—Ä–∏–≥–∞–¥—ã —Å –Æ–∂–Ω–æ-–î–æ–Ω–µ—Ü–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
        '–î–∞–∂–µ –≤ –±–æ–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —á–µ–ª–æ–≤–µ–∫ –æ—Å—Ç–∞—ë—Ç—Å—è —á–µ–ª–æ–≤–µ–∫–æ–º.',
        '–í—Ä–∞–≥ –Ω–µ –ø—Ä–æ–π–¥–µ—Ç',
        '–°–ª–∞–≤–∞ –£–∫—Ä–∞–∏–Ω–µ',
        '–ì–µ—Ä–æ—è–º —Å–ª–∞–≤–∞'
    ]
    
    print(f"   –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(test_keywords)}")
    for i, keyword in enumerate(test_keywords, 1):
        print(f"   {i}. {keyword}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    print(f"\nüîç –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
    try:
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å —Ç–æ—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
        print("   –¢–µ—Å—Ç 1: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (exact_match=True)")
        filtered_exact = await filter_plugin.filter_posts_comprehensive_parallel(
            all_posts, test_keywords, exact_match=True
        )
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(filtered_exact)} –ø–æ—Å—Ç–æ–≤")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å —á–∞—Å—Ç–∏—á–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
        print("   –¢–µ—Å—Ç 2: –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (exact_match=False)")
        filtered_partial = await filter_plugin.filter_posts_comprehensive_parallel(
            all_posts, test_keywords, exact_match=False
        )
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(filtered_partial)} –ø–æ—Å—Ç–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        if filtered_partial:
            print(f"\nüìù –ü—Ä–∏–º–µ—Ä—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:")
            for i, post in enumerate(filtered_partial[:5]):
                text = post.get('text', '')[:100]
                print(f"   {i+1}. {text}...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:")
        for keyword in test_keywords:
            keyword_posts = []
            for post in all_posts:
                text = filter_plugin._extract_post_text(post)
                if filter_plugin._check_keyword_match(text, keyword, exact_match=False):
                    keyword_posts.append(post)
            print(f"   '{keyword}': {len(keyword_posts)} –ø–æ—Å—Ç–æ–≤")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    
    filter_plugin.shutdown()
    print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    asyncio.run(test_filter_with_real_data()) 