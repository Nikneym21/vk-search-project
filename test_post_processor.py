#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π —á–µ—Ä–µ–∑ PostProcessorPlugin
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.core.plugin_manager import PluginManager


def test_post_processor_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ PostProcessorPlugin"""
    print("üß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ PostProcessorPlugin")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º PluginManager
        plugin_manager = PluginManager()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–≥–∏–Ω—ã
        plugin_manager.load_plugins()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã
        plugin_manager.initialize_plugins()
        
        # –ü–æ–ª—É—á–∞–µ–º PostProcessorPlugin
        post_processor = plugin_manager.get_plugin('post_processor')
        
        if not post_processor:
            print("‚ùå PostProcessorPlugin –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print("‚úÖ PostProcessorPlugin –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º –ø–ª–∞–≥–∏–Ω–∞–º
        filter_plugin = plugin_manager.get_plugin('filter')
        deduplication_plugin = plugin_manager.get_plugin('deduplication')
        database_plugin = plugin_manager.get_plugin('database')
        
        print(f"üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:")
        print(f"   FilterPlugin: {'‚úÖ' if filter_plugin else '‚ùå'}")
        print(f"   DeduplicationPlugin: {'‚úÖ' if deduplication_plugin else '‚ùå'}")
        print(f"   DatabasePlugin: {'‚úÖ' if database_plugin else '‚ùå'}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = post_processor.get_statistics()
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ PostProcessorPlugin: {stats}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


def test_post_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º PluginManager
        plugin_manager = PluginManager()
        plugin_manager.load_plugins()
        plugin_manager.initialize_plugins()
        
        # –ü–æ–ª—É—á–∞–µ–º PostProcessorPlugin
        post_processor = plugin_manager.get_plugin('post_processor')
        
        if not post_processor:
            print("‚ùå PostProcessorPlugin –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_posts = [
            {
                "id": 1,
                "owner_id": 123,
                "text": "Python –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏",
                "link": "https://vk.com/wall123_1",
                "date": 1640995200
            },
            {
                "id": 2,
                "owner_id": 456,
                "text": "JavaScript —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±",
                "link": "https://vk.com/wall456_2",
                "date": 1640995200
            },
            {
                "id": 3,
                "owner_id": 123,
                "text": "Python –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏",  # –î—É–±–ª–∏–∫–∞—Ç –ø–æ —Ç–µ–∫—Å—Ç—É
                "link": "https://vk.com/wall123_3",  # –†–∞–∑–Ω–∞—è —Å—Å—ã–ª–∫–∞
                "date": 1640995200
            },
            {
                "id": 4,
                "owner_id": 789,
                "text": "Python –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏",
                "link": "https://vk.com/wall123_1",  # –î—É–±–ª–∏–∫–∞—Ç –ø–æ —Å—Å—ã–ª–∫–µ
                "date": 1640995200
            },
            {
                "id": 5,
                "owner_id": 999,
                "text": "Java —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
                "link": "https://vk.com/wall999_5",
                "date": 1640995200
            }
        ]
        
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(test_posts)} –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
        
        # –¢–µ—Å—Ç 1: –¢–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        print("\nüîç –¢–µ—Å—Ç 1: –¢–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        result1 = post_processor.process_posts(
            posts=test_posts,
            keywords=None,
            remove_duplicates=True,
            processing_order=["deduplication"]
        )
        
        print(f"   –ò—Å—Ö–æ–¥–Ω–æ: {result1['original_count']}")
        print(f"   –î—É–±–ª–∏–∫–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–æ: {result1['duplicates_removed']}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result1['final_count']}")
        print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result1['processing_time']:.3f}—Å")
        
        # –¢–µ—Å—Ç 2: –¢–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        print("\nüîç –¢–µ—Å—Ç 2: –¢–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
        result2 = post_processor.process_posts(
            posts=test_posts,
            keywords=["Python", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"],
            exact_match=False,
            remove_duplicates=False,
            processing_order=["filtering"]
        )
        
        print(f"   –ò—Å—Ö–æ–¥–Ω–æ: {result2['original_count']}")
        print(f"   –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {result2['filtered_count']}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result2['final_count']}")
        print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result2['processing_time']:.3f}—Å")
        
        # –¢–µ—Å—Ç 3: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        print("\nüîç –¢–µ—Å—Ç 3: –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (–¥—É–±–ª–∏–∫–∞—Ç—ã + —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è)")
        result3 = post_processor.process_posts(
            posts=test_posts,
            keywords=["Python", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"],
            exact_match=False,
            remove_duplicates=True,
            processing_order=["deduplication", "filtering"]
        )
        
        print(f"   –ò—Å—Ö–æ–¥–Ω–æ: {result3['original_count']}")
        print(f"   –î—É–±–ª–∏–∫–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–æ: {result3['duplicates_removed']}")
        print(f"   –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {result3['filtered_count']}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result3['final_count']}")
        print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result3['processing_time']:.3f}—Å")
        
        # –¢–µ—Å—Ç 4: –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print("\nüîç –¢–µ—Å—Ç 4: –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è + –¥—É–±–ª–∏–∫–∞—Ç—ã)")
        result4 = post_processor.process_posts(
            posts=test_posts,
            keywords=["Python", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"],
            exact_match=False,
            remove_duplicates=True,
            processing_order=["filtering", "deduplication"]
        )
        
        print(f"   –ò—Å—Ö–æ–¥–Ω–æ: {result4['original_count']}")
        print(f"   –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {result4['filtered_count']}")
        print(f"   –î—É–±–ª–∏–∫–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–æ: {result4['duplicates_removed']}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result4['final_count']}")
        print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result4['processing_time']:.3f}—Å")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PostProcessorPlugin")
    print("=" * 60)
    
    # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    integration_success = test_post_processor_integration()
    
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_success = test_post_processing()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'‚úÖ –£–°–ü–ï–•' if integration_success else '‚ùå –û–®–ò–ë–ö–ê'}")
    print(f"   –û–±—Ä–∞–±–æ—Ç–∫–∞: {'‚úÖ –£–°–ü–ï–•' if processing_success else '‚ùå –û–®–ò–ë–ö–ê'}")
    
    if integration_success and processing_success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("PostProcessorPlugin –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("\n‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –¢–ï–°–¢–ê–•")


if __name__ == "__main__":
    main() 