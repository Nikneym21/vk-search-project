#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
"""

import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def test_database_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from src.plugins.database.database_manager_plugin import DatabaseManagerPlugin
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω
        db_plugin = DatabaseManagerPlugin()
        if not db_plugin.initialize():
            print("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return None
        
        print("‚úÖ –ü–ª–∞–≥–∏–Ω –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
        print("\nüîß –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á")
        
        task1_id = db_plugin.create_task(
            task_name="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ 1",
            keywords=["—Ç–µ—Å—Ç–æ–≤—ã–π", "–ø–æ—Å—Ç", "–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"],
            start_date="25.07.2025",
            end_date="25.07.2025",
            exact_match=True,
            minus_words=["—Å–ø–∞–º", "—Ä–µ–∫–ª–∞–º–∞"]
        )
        
        task2_id = db_plugin.create_task(
            task_name="–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ 2",
            keywords=["–≤—Ç–æ—Ä–æ–π", "—Ç–µ—Å—Ç"],
            start_date="26.07.2025",
            end_date="26.07.2025",
            exact_match=False
        )
        
        print(f"–°–æ–∑–¥–∞–Ω—ã –∑–∞–¥–∞—á–∏: {task1_id}, {task2_id}")
        
        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
        print("\nüìù –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤")
        
        test_posts = []
        for i in range(100):
            post = {
                'id': i,
                'owner_id': -123456,
                'text': f'–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –Ω–æ–º–µ—Ä {i} —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç',
                'date': 1640995200 + i * 3600,
                'likes': {'count': 10 + i % 50},
                'comments': {'count': 5 + i % 20},
                'reposts': {'count': 2 + i % 10},
                'views': {'count': 100 + i % 200},
                'keywords_matched': ['—Ç–µ—Å—Ç–æ–≤—ã–π', '–ø–æ—Å—Ç']
            }
            test_posts.append(post)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        for i in range(10):
            duplicate_post = {
                'id': 100 + i,
                'owner_id': -123456,
                'text': f'–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –Ω–æ–º–µ—Ä {i} —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç',  # –î—É–±–ª–∏–∫–∞—Ç
                'date': 1640995200 + i * 3600,
                'likes': {'count': 10 + i % 50},
                'comments': {'count': 5 + i % 20},
                'reposts': {'count': 2 + i % 10},
                'views': {'count': 100 + i % 200},
                'keywords_matched': ['—Ç–µ—Å—Ç–æ–≤—ã–π', '–ø–æ—Å—Ç']
            }
            test_posts.append(duplicate_post)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç—ã –≤ –ë–î
        saved_count = db_plugin.save_posts(task1_id, test_posts)
        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ {task1_id}")
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á
        print("\nüìã –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á")
        tasks = db_plugin.get_tasks()
        print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
        
        for task in tasks:
            print(f"  –ó–∞–¥–∞—á–∞ {task['id']}: {task['task_name']} (—Å—Ç–∞—Ç—É—Å: {task['status']})")
            print(f"    –ü–æ—Å—Ç–æ–≤: {task['total_posts']}, –õ–∞–π–∫–æ–≤: {task['total_likes']}, SI: {task['total_SI']}")
        
        # –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
        print("\nüìÑ –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∑–∞–¥–∞—á–∏")
        posts = db_plugin.get_task_posts(task1_id, limit=10)
        print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(posts)} –ø–æ—Å—Ç–æ–≤ (–ø–µ—Ä–≤—ã–µ 10)")
        
        for i, post in enumerate(posts[:3]):
            print(f"  –ü–æ—Å—Ç {i+1}: {post['text'][:50]}...")
            print(f"    –õ–∞–π–∫–∏: {post['likes']}, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {post['comments']}")
        
        # –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìä –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á–∏")
        stats = db_plugin.get_task_statistics(task1_id)
        if stats:
            print(f"–ó–∞–¥–∞—á–∞: {stats['task_name']}")
            print(f"–°—Ç–∞—Ç—É—Å: {stats['status']}")
            print(f"–ü–æ—Å—Ç–æ–≤: {stats['total_posts']}")
            print(f"–õ–∞–π–∫–æ–≤: {stats['total_likes']}")
            print(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {stats['total_comments']}")
            print(f"–†–µ–ø–æ—Å—Ç–æ–≤: {stats['total_reposts']}")
            print(f"–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {stats['total_views']}")
            print(f"–û–±—â–∏–π SI: {stats['total_SI']}")
        
        # –¢–µ—Å—Ç 6: –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        print("\nüîç –¢–µ—Å—Ç 6: –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        duplicates = db_plugin.find_duplicates(task1_id)
        print(f"–ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(duplicates)}")
        
        for i, dup_group in enumerate(duplicates[:3]):
            print(f"  –ì—Ä—É–ø–ø–∞ {i+1}: {len(dup_group)} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
            for j, post in enumerate(dup_group[:2]):
                print(f"    {j+1}. {post['text'][:50]}...")
        
        # –¢–µ—Å—Ç 7: –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
        print("\nüíæ –¢–µ—Å—Ç 7: –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV")
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        csv_path = f"data/results/test_export_{timestamp}.csv"
        
        if db_plugin.export_task_to_csv(task1_id, csv_path):
            print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω: {csv_path}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if os.path.exists(csv_path):
                file_size = os.path.getsize(csv_path)
                print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / 1024:.2f} KB")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")
        
        # –¢–µ—Å—Ç 8: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        print("\nüîÑ –¢–µ—Å—Ç 8: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏")
        db_plugin.update_task_status(task1_id, "completed")
        print(f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task1_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'completed'")
        
        db_plugin.shutdown()
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        return {
            'task1_id': task1_id,
            'task2_id': task2_id,
            'saved_posts': saved_count,
            'total_tasks': len(tasks),
            'duplicates_count': len(duplicates),
            'csv_path': csv_path if os.path.exists(csv_path) else None
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return None

def show_database_info():
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "=" * 60)
    print("üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    db_path = "data/parser_results.db"
    
    if os.path.exists(db_path):
        file_size = os.path.getsize(db_path)
        print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
        print(f"üìè –†–∞–∑–º–µ—Ä: {file_size / 1024:.2f} KB")
        
        try:
            import sqlite3
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()
            print(f"üìã –¢–∞–±–ª–∏—Ü: {len(tables)}")
            
            for table in tables:
                table_name = table[0]
                cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                count = cursor.fetchone()[0]
                print(f"  - {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
            
            conn.close()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ë–î: {e}")
    else:
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
    results = test_database_system()
    
    if results:
        print(f"\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   –ó–∞–¥–∞—á–∞ 1: {results['task1_id']}")
        print(f"   –ó–∞–¥–∞—á–∞ 2: {results['task2_id']}")
        print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {results['saved_posts']}")
        print(f"   –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {results['total_tasks']}")
        print(f"   –ì—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {results['duplicates_count']}")
        if results['csv_path']:
            print(f"   CSV —Ñ–∞–π–ª: {results['csv_path']}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î
    show_database_info()
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")

if __name__ == "__main__":
    main() 