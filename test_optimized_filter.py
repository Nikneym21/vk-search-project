#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –ª–µ–≥–∫–∏–º–∏ –∏ –ø–æ–ª–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
import json
import gzip
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –≤ sys.path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def test_optimized_filter():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        from src.plugins.filter.optimized_filter_plugin import OptimizedFilterPlugin
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω
        filter_plugin = OptimizedFilterPlugin()
        filter_plugin.initialize()
        
        print("‚úÖ OptimizedFilterPlugin –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º–∏—Ç–∞—Ü–∏—è –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞)
        test_posts = []
        for i in range(1000):
            post = {
                'id': i,
                'owner_id': -123456,
                'text': f'–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –Ω–æ–º–µ—Ä {i} —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏',
                'date': 1640995200 + i,
                'likes': {'count': 10 + i % 50},
                'comments': {'count': 5 + i % 20},
                'reposts': {'count': 2 + i % 10},
                'views': {'count': 100 + i % 200}
            }
            test_posts.append(post)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        for i in range(100):
            duplicate_post = {
                'id': 1000 + i,
                'owner_id': -123456,
                'text': f'–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –Ω–æ–º–µ—Ä {i} —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏',  # –î—É–±–ª–∏–∫–∞—Ç
                'date': 1640995200 + i,
                'likes': {'count': 10 + i % 50},
                'comments': {'count': 5 + i % 20},
                'reposts': {'count': 2 + i % 10},
                'views': {'count': 100 + i % 200}
            }
            test_posts.append(duplicate_post)
        
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(test_posts)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –¥—É–±–ª–∏–∫–∞—Ç—ã)")
        
        # –¢–µ—Å—Ç 1: –ë—ã—Å—Ç—Ä–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        print("\nüîç –¢–µ—Å—Ç 1: –ë—ã—Å—Ç—Ä–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
        unique_posts = filter_plugin.filter_unique_posts_fast(test_posts)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {len(unique_posts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
        print(f"üìâ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(test_posts) - len(unique_posts)}")
        
        # –¢–µ—Å—Ç 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        print("\nüîç –¢–µ—Å—Ç 2: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º")
        keywords = ['–∫–ª—é—á–µ–≤—ã–º–∏', '—Å–ª–æ–≤–∞–º–∏', '—Ç–µ—Å—Ç–æ–≤—ã–π']
        filtered_posts = filter_plugin.filter_posts_by_keywords_fast(unique_posts, keywords, exact_match=False)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {len(filtered_posts)} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
        
        # –¢–µ—Å—Ç 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–µ–≥–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        print("\nüíæ –¢–µ—Å—Ç 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–µ–≥–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        lightweight_file = filter_plugin.save_lightweight_results(filtered_posts, f"test_lightweight_{timestamp}")
        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {lightweight_file}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(lightweight_file)
        print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / 1024:.2f} KB")
        
        # –¢–µ—Å—Ç 4: –≠–∫—Å–ø–æ—Ä—Ç –≤ –ø–æ–ª–Ω—ã–π CSV
        print("\nüìä –¢–µ—Å—Ç 4: –≠–∫—Å–ø–æ—Ä—Ç –≤ –ø–æ–ª–Ω—ã–π CSV")
        output_csv = f"data/results/test_full_{timestamp}.csv"
        csv_file = filter_plugin.export_to_full_csv(lightweight_file, output_csv)
        if csv_file:
            csv_size = os.path.getsize(csv_file)
            print(f"CSV —Ñ–∞–π–ª: {csv_file}")
            print(f"–†–∞–∑–º–µ—Ä CSV: {csv_size / 1024:.2f} KB")
        
        # –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\nüìà –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats = filter_plugin.get_statistics(filtered_posts)
        print(f"–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {stats['total_posts']}")
        print(f"–í—Å–µ–≥–æ –ª–∞–π–∫–æ–≤: {stats['total_likes']}")
        print(f"–í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {stats['total_comments']}")
        print(f"–í—Å–µ–≥–æ —Ä–µ–ø–æ—Å—Ç–æ–≤: {stats['total_reposts']}")
        print(f"–í—Å–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {stats['total_views']}")
        print(f"–û–±—â–∏–π SI: {stats['total_SI']}")
        
        # –¢–µ—Å—Ç 6: –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        print("\nüîç –¢–µ—Å—Ç 6: –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        duplicates = filter_plugin.find_duplicates(test_posts)
        print(f"–ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(duplicates)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        for i, dup_group in enumerate(duplicates[:3]):
            print(f"\n  –ì—Ä—É–ø–ø–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ {i+1} ({len(dup_group)} –ø–æ—Å—Ç–æ–≤):")
            for dup in dup_group[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                text = dup.get('text', '')[:50]
                print(f"    - {text}...")
        
        filter_plugin.shutdown()
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        return {
            'lightweight_file': lightweight_file,
            'csv_file': csv_file,
            'stats': stats,
            'duplicates_count': len(duplicates)
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return None

def compare_formats():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    print("\n" + "=" * 60)
    print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –§–û–†–ú–ê–¢–û–í –§–ê–ô–õ–û–í")
    print("=" * 60)
    
    results_dir = "data/results"
    if not os.path.exists(results_dir):
        print("‚ùå –ü–∞–ø–∫–∞ data/results –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    files = os.listdir(results_dir)
    csv_files = [f for f in files if f.endswith('.csv')]
    json_files = [f for f in files if f.endswith('.json.gz')]
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:")
    print(f"   CSV —Ñ–∞–π–ª–æ–≤: {len(csv_files)}")
    print(f"   JSON.GZ —Ñ–∞–π–ª–æ–≤: {len(json_files)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤
    if csv_files:
        latest_csv = max(csv_files, key=lambda x: os.path.getctime(os.path.join(results_dir, x)))
        csv_path = os.path.join(results_dir, latest_csv)
        csv_size = os.path.getsize(csv_path)
        print(f"\nüìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π CSV —Ñ–∞–π–ª: {latest_csv}")
        print(f"   –†–∞–∑–º–µ—Ä: {csv_size / 1024:.2f} KB")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        try:
            import pandas as pd
            df = pd.read_csv(csv_path)
            print(f"   –°—Ç—Ä–æ–∫: {len(df)}")
            print(f"   –ö–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
    
    if json_files:
        latest_json = max(json_files, key=lambda x: os.path.getctime(os.path.join(results_dir, x)))
        json_path = os.path.join(results_dir, latest_json)
        json_size = os.path.getsize(json_path)
        print(f"\nüìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π JSON.GZ —Ñ–∞–π–ª: {latest_json}")
        print(f"   –†–∞–∑–º–µ—Ä: {json_size / 1024:.2f} KB")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        try:
            with gzip.open(json_path, 'rt', encoding='utf-8') as f:
                data = json.load(f)
                print(f"   –ó–∞–ø–∏—Å–µ–π: {len(data)}")
        except Exception as e:
            print(f"   –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –§–ò–õ–¨–¢–†–ê–¶–ò–ò")
    print("=" * 60)
    
    # –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞
    results = test_optimized_filter()
    
    if results:
        print(f"\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   –õ–µ–≥–∫–∏–π —Ñ–∞–π–ª: {results['lightweight_file']}")
        print(f"   CSV —Ñ–∞–π–ª: {results['csv_file']}")
        print(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {results['stats']['total_posts']} –ø–æ—Å—Ç–æ–≤")
        print(f"   –ì—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {results['duplicates_count']}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤
    compare_formats()
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")

if __name__ == "__main__":
    main() 