#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞: API –ø–æ–∏—Å–∫ ‚Üí —Å—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è ‚Üí —ç–∫—Å–ø–æ—Ä—Ç CSV
"""

import asyncio
import sys
import os
from datetime import datetime
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

async def test_full_pipeline():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –ø–æ–∏—Å–∫–∞"""
    print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞...")

    from core.plugin_manager import PluginManager

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤
    plugin_manager = PluginManager()
    plugin_manager.load_plugins()  # –£–±–∏—Ä–∞–µ–º await

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(plugin_manager.plugins)} –ø–ª–∞–≥–∏–Ω–æ–≤")

    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    test_keywords = [
        "–ù–∞—Å –Ω–µ —Å–ª–æ–º–∏—Ç—å. –ù–∏ –ø–µ–ø–ª–æ–º, –Ω–∏ —Ä–∞–∑—Ä—É—Ö–æ–π.",
        "–î–æ–±—Ä–æ –≤—Å–µ–≥–¥–∞ –Ω–∞–π–¥—ë—Ç —Å–µ–±–µ –º–µ—Å—Ç–æ ‚Äî –¥–∞–∂–µ –Ω–∞ –ø–µ—Ä–µ–¥–æ–≤–æ–π."
    ]

    # –î–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã)
    start_date = "24.07.2025"
    start_time = "00:00"
    end_date = "25.07.2025"
    end_time = "23:59"

    print(f"üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {test_keywords}")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} {start_time} - {end_date} {end_time}")
    print()

    # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –ë–ï–ó —Å—Ç—Ä–æ–≥–æ–π –ª–æ–∫–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    print("=== –¢–ï–°–¢ 1: –ü–æ–∏—Å–∫ –ë–ï–ó —Å—Ç—Ä–æ–≥–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ===")

    start_time = time.time()

    result1 = await plugin_manager.coordinate_full_search(
        keywords=test_keywords,
        api_keywords=test_keywords,
        start_ts=int(datetime(2025, 7, 24, 0, 0).timestamp()),
        end_ts=int(datetime(2025, 7, 25, 23, 59).timestamp()),
        exact_match=True,
        minus_words=[],
        start_date=start_date,
        start_time="00:00",
        end_date=end_date,
        end_time="23:59",
        disable_local_filtering=True  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    )

    elapsed1 = time.time() - start_time

    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed1:.1f}—Å")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ë–ï–ó —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {result1.get('posts_count', 0)} –ø–æ—Å—Ç–æ–≤")
    print(f"üìÅ –§–∞–π–ª: {result1.get('filepath', '–Ω–µ —Å–æ–∑–¥–∞–Ω')}")
    print()

    # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –° —Å—Ç—Ä–æ–≥–æ–π –ª–æ–∫–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    print("=== –¢–ï–°–¢ 2: –ü–æ–∏—Å–∫ –° —Å—Ç—Ä–æ–≥–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π ===")

    start_time = time.time()

    result2 = await plugin_manager.coordinate_full_search(
        keywords=test_keywords,
        api_keywords=test_keywords,
        start_ts=int(datetime(2025, 7, 24, 0, 0).timestamp()),
        end_ts=int(datetime(2025, 7, 25, 23, 59).timestamp()),
        exact_match=True,
        minus_words=[],
        start_date=start_date,
        start_time="00:00",
        end_date=end_date,
        end_time="23:59",
        disable_local_filtering=False  # –í–∫–ª—é—á–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    )

    elapsed2 = time.time() - start_time

    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed2:.1f}—Å")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –° —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π: {result2.get('posts_count', 0)} –ø–æ—Å—Ç–æ–≤")
    print(f"üìÅ –§–∞–π–ª: {result2.get('filepath', '–Ω–µ —Å–æ–∑–¥–∞–Ω')}")
    print()

    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("=== –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===")

    posts_without_filter = result1.get('posts_count', 0)
    posts_with_filter = result2.get('posts_count', 0)

    if posts_without_filter > posts_with_filter:
        filtered_out = posts_without_filter - posts_with_filter
        filter_efficiency = (filtered_out / posts_without_filter) * 100 if posts_without_filter > 0 else 0

        print(f"‚úÖ –°—Ç—Ä–æ–≥–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –†–ê–ë–û–¢–ê–ï–¢!")
        print(f"üìâ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {filtered_out} –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ ({filter_efficiency:.1f}%)")
    elif posts_without_filter == posts_with_filter:
        print("‚ö†Ô∏è  –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –ø–æ—Å—Ç—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã)")
    else:
        print("‚ùå –°—Ç—Ä–∞–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ—Å—Ç–æ–≤ –±–æ–ª—å—à–µ —á–µ–º –±–µ–∑ –Ω–µ—ë")

    print()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CSV —Ñ–∞–π–ª–æ–≤
    print("=== –ü–†–û–í–ï–†–ö–ê CSV –§–ê–ô–õ–û–í ===")

    for i, result in enumerate([result1, result2], 1):
        filepath = result.get('filepath')
        if filepath and os.path.exists(filepath):
            print(f"üìÑ –¢–µ—Å—Ç {i} - —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filepath}")

            # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
            try:
                import pandas as pd
                df = pd.read_csv(filepath)
                print(f"   –°—Ç—Ä–æ–∫ –≤ CSV: {len(df)}")
                print(f"   –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–µ keywords_matched
                if 'keywords_matched' in df.columns:
                    non_empty_keywords = df[df['keywords_matched'].notna() & (df['keywords_matched'] != '')].shape[0]
                    print(f"   –ü–æ—Å—Ç—ã —Å keywords_matched: {non_empty_keywords}")

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä
                    sample = df[df['keywords_matched'].notna() & (df['keywords_matched'] != '')]['keywords_matched'].head(3)
                    if not sample.empty:
                        print(f"   –ü—Ä–∏–º–µ—Ä—ã keywords_matched:")
                        for idx, keywords in sample.items():
                            print(f"     - {keywords}")

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV: {e}")
        else:
            print(f"üìÑ –¢–µ—Å—Ç {i} - —Ñ–∞–π–ª –ù–ï —Å–æ–∑–¥–∞–Ω")

    print()
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–ª–∞–≥–∏–Ω—ã
    plugin_manager.shutdown_plugins()  # –£–±–∏—Ä–∞–µ–º await

if __name__ == "__main__":
    asyncio.run(test_full_pipeline())
