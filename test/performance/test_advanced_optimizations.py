#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
"""

import asyncio
import time
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
from src.core.plugin_manager import PluginManager

async def test_parallel_filtering():
    """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    pm = PluginManager()
    pm.load_plugins()
    pm.initialize_plugins()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    keywords = ['–Ω–æ–≤–æ—Å—Ç–∏', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ']
    start_date = '24.07.2025'
    end_date = '24.07.2025'
    
    start_time = time.time()
    
    try:
        results = await pm.coordinate_search_and_filter(
            keywords, start_date, end_date, exact_match=False
        )
        
        execution_time = time.time() - start_time
        
        print(f"‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"   –í—Ä–µ–º—è: {execution_time:.2f} —Å–µ–∫")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        print(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {len(results) / execution_time:.1f} –ø–æ—Å—Ç–æ–≤/—Å–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º FilterPlugin
        filter_plugin = pm.get_plugin('filter')
        if filter_plugin:
            print(f"   FilterPlugin –∑–∞–≥—Ä—É–∂–µ–Ω: ‚úÖ")
        
        pm.shutdown_plugins()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        pm.shutdown_plugins()

async def test_intelligent_caching():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüß† –¢–µ—Å—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    
    pm = PluginManager()
    pm.load_plugins()
    pm.initialize_plugins()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    keywords = ['python', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞']
    start_date = '24.07.2025'
    end_date = '24.07.2025'
    
    try:
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
        print("üìä –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å cache miss)...")
        start_time = time.time()
        results1 = await pm.coordinate_search_and_filter(
            keywords, start_date, end_date, exact_match=False
        )
        time1 = time.time() - start_time
        
        # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å cache hit)
        print("üìä –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å cache hit)...")
        start_time = time.time()
        results2 = await pm.coordinate_search_and_filter(
            keywords, start_date, end_date, exact_match=False
        )
        time2 = time.time() - start_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º VKSearchPlugin —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        vk_plugin = pm.get_plugin('vk_search')
        if vk_plugin:
            stats = vk_plugin.get_statistics()
            intelligent_cache = stats.get("intelligent_caching", {})
            
            print(f"‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ:")
            print(f"   Cache hits: {intelligent_cache.get('cache_hits', 0)}")
            print(f"   Cache misses: {intelligent_cache.get('cache_misses', 0)}")
            print(f"   Cache hit rate: {intelligent_cache.get('cache_hit_rate', 0):.1%}")
            print(f"   –í—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {time1:.2f} —Å–µ–∫")
            print(f"   –í—Ä–µ–º—è –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {time2:.2f} —Å–µ–∫")
            print(f"   –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {time1 / max(time2, 0.1):.1f}x")
            
            # –¢–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            top_queries = intelligent_cache.get('top_popular_queries', [])
            if top_queries:
                print(f"   –¢–æ–ø –∑–∞–ø—Ä–æ—Å–æ–≤: {top_queries[:3]}")
        
        pm.shutdown_plugins()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        pm.shutdown_plugins()

async def test_monitoring():
    """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    print("\nüìä –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print("=" * 50)
    
    pm = PluginManager()
    pm.load_plugins()
    pm.initialize_plugins()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º MonitoringPlugin
        monitoring_plugin = pm.get_plugin('monitoring')
        if monitoring_plugin:
            print("‚úÖ MonitoringPlugin –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
            await asyncio.sleep(10)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = monitoring_plugin.get_statistics()
            print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
            print(f"   –í–∫–ª—é—á–µ–Ω: {stats.get('enabled', False)}")
            print(f"   –ê–ª–µ—Ä—Ç—ã: {stats.get('alerts_count', 0)}")
            print(f"   –ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫: {stats.get('history_size', 0)} –∑–∞–ø–∏—Å–µ–π")
            print(f"   –î–∞—à–±–æ—Ä–¥: {'‚úÖ' if stats.get('dashboard_enabled', False) else '‚ùå'}")
            print(f"   –ê–ª–µ—Ä—Ç—ã: {'‚úÖ' if stats.get('alerts_enabled', False) else '‚ùå'}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞
            dashboard = monitoring_plugin.get_dashboard_data()
            metrics = dashboard.get('metrics', {})
            
            print(f"üìä –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:")
            print(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {metrics.get('response_times', 0):.3f} —Å–µ–∫")
            print(f"   Rate limit hits: {metrics.get('rate_limit_hits', 0)}")
            print(f"   Cache hit rate: {metrics.get('cache_hit_rate', 0):.1%}")
            print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {metrics.get('memory_usage', 0):.1%}")
            print(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {metrics.get('active_connections', 0)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = dashboard.get('status', 'unknown')
            print(f"üéØ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
            alerts = dashboard.get('alerts', [])
            if alerts:
                print(f"‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–ª–µ—Ä—Ç—ã:")
                for alert in alerts[-3:]:
                    print(f"   {alert.get('message', 'Unknown')}")
            else:
                print("‚úÖ –ê–ª–µ—Ä—Ç–æ–≤ –Ω–µ—Ç")
        
        pm.shutdown_plugins()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        pm.shutdown_plugins()

async def test_integrated_optimizations():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π"""
    print("\nüéØ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π")
    print("=" * 50)
    
    pm = PluginManager()
    pm.load_plugins()
    pm.initialize_plugins()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    keywords = ['–Ω–æ–≤–æ—Å—Ç–∏', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', 'python', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞']
    start_date = '24.07.2025'
    end_date = '24.07.2025'
    
    start_time = time.time()
    
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        results = await pm.coordinate_search_and_filter(
            keywords, start_date, end_date, exact_match=False
        )
        
        execution_time = time.time() - start_time
        
        print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:")
        print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {execution_time:.2f} —Å–µ–∫")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        print(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {len(results) / execution_time:.1f} –ø–æ—Å—Ç–æ–≤/—Å–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–ª–∞–≥–∏–Ω—ã
        plugins_to_check = ['vk_search', 'filter', 'monitoring']
        for plugin_name in plugins_to_check:
            plugin = pm.get_plugin(plugin_name)
            if plugin:
                print(f"   {plugin_name}: ‚úÖ")
            else:
                print(f"   {plugin_name}: ‚ùå")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        vk_plugin = pm.get_plugin('vk_search')
        if vk_plugin:
            stats = vk_plugin.get_statistics()
            intelligent_cache = stats.get("intelligent_caching", {})
            
            print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   Cache hit rate: {intelligent_cache.get('cache_hit_rate', 0):.1%}")
            print(f"   –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {len(intelligent_cache.get('top_popular_queries', []))}")
            print(f"   –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–ø—Ä–æ—Å–æ–≤: {len(intelligent_cache.get('top_query_patterns', []))}")
        
        pm.shutdown_plugins()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        pm.shutdown_plugins()

if __name__ == "__main__":
    print("üéØ –¢–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    asyncio.run(test_parallel_filtering())
    asyncio.run(test_intelligent_caching())
    asyncio.run(test_monitoring())
    asyncio.run(test_integrated_optimizations())
    
    print("\n" + "=" * 60)
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!") 