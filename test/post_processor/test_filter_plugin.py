#!/usr/bin/env python3
"""
–Æ–Ω–∏—Ç-—Ç–µ—Å—Ç –¥–ª—è FilterPlugin
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–ª–∞–≥–∏–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ñ—Ä–∞–∑–∞–º
"""

import unittest
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.plugins.post_processor.filter.filter_plugin import FilterPlugin

class TestFilterPlugin(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è FilterPlugin"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.plugin = FilterPlugin()
        self.plugin.initialize()
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.plugin.shutdown()
    
    def test_plugin_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–∞"""
        self.assertEqual(self.plugin.name, "FilterPlugin")
        self.assertTrue(self.plugin.is_enabled())
    
    def test_filter_unique_posts(self):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
        posts = [
            {"owner_id": 1, "id": 100, "text": "post 1"},
            {"owner_id": 1, "id": 100, "text": "post 1 duplicate"},  # –î—É–±–ª–∏–∫–∞—Ç
            {"owner_id": 2, "id": 200, "text": "post 2"},
            {"owner_id": 1, "id": 101, "text": "post 3"},
        ]
        
        unique_posts = self.plugin.filter_unique_posts(posts)
        
        # –î–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è 3 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞ (—É–±—Ä–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç)
        self.assertEqual(len(unique_posts), 3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç —É–±—Ä–∞–Ω
        owner_ids = [post["owner_id"] for post in unique_posts]
        post_ids = [post["id"] for post in unique_posts]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è (owner_id, id) —É–Ω–∏–∫–∞–ª—å–Ω–∞
        unique_keys = set(zip(owner_ids, post_ids))
        self.assertEqual(len(unique_keys), 3)
    
    def test_filter_by_keyword(self):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"""
        posts = [
            {'text': '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º'},
            {'text': '–û–±—ã—á–Ω—ã–π –ø–æ—Å—Ç –±–µ–∑ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞'},
            {'text': '–ï—â–µ –æ–¥–∏–Ω –ø–æ—Å—Ç —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º'}
        ]
        
        keywords = ['–∫–ª—é—á–µ–≤—ã–º']
        result = self.plugin.filter_posts_by_keyword(posts, '–∫–ª—é—á–µ–≤—ã–º', exact_match=True)
        
        self.assertEqual(len(result), 2)
        self.assertIn('–∫–ª—é—á–µ–≤—ã–º', result[0]['text'])
        self.assertIn('–∫–ª—é—á–µ–≤—ã–º', result[1]['text'])
    
    def test_filter_posts_by_keyword_with_text_cleaning(self):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å –æ—á–∏—Å—Ç–∫–æ–π —Ç–µ–∫—Å—Ç–∞"""
        posts = [
            {"text": "–î–∞–∂–µ –≤ –±–æ–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —á–µ–ª–æ–≤–µ–∫ –æ—Å—Ç–∞—ë—Ç—Å—è —á–µ–ª–æ–≤–µ–∫–æ–º. üéØ #–≤–æ–π–Ω–∞", "owner_id": 1, "id": 100},
            {"text": "–õ–∏—Å –ø–µ—Ä–µ–¥–∞–µ—Ç –≤—Å–µ–º –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è #—É—Ç—Ä–æ", "owner_id": 2, "id": 200},
            {"text": "–ü—Ä–∏–≤–µ—Ç —Ä–æ–¥–Ω–æ–π –ë—É—Ä—è—Ç–∏–∏ –æ—Ç —à—Ç—É—Ä–º–æ–≤–∏–∫–æ–≤ —Ç–∞–Ω–∫–æ–≤–æ–π –±—Ä–∏–≥–∞–¥—ã —Å –Æ–∂–Ω–æ-–î–æ–Ω–µ—Ü–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è üá∑üá∫", "owner_id": 3, "id": 300},
            {"text": "–û–±—ã—á–Ω—ã–π –ø–æ—Å—Ç –±–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤", "owner_id": 4, "id": 400},
        ]
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–≤–æ–º—É –∫–ª—é—á—É —Å –æ—á–∏—Å—Ç–∫–æ–π
        filtered = self.plugin.filter_posts_by_keyword_with_text_cleaning(
            posts, "–î–∞–∂–µ –≤ –±–æ–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —á–µ–ª–æ–≤–µ–∫ –æ—Å—Ç–∞—ë—Ç—Å—è —á–µ–ª–æ–≤–µ–∫–æ–º", exact_match=True
        )
        self.assertEqual(len(filtered), 1)
        self.assertEqual(filtered[0]["owner_id"], 1)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ç–æ—Ä–æ–º—É –∫–ª—é—á—É —Å –æ—á–∏—Å—Ç–∫–æ–π
        filtered = self.plugin.filter_posts_by_keyword_with_text_cleaning(
            posts, "–õ–∏—Å –ø–µ—Ä–µ–¥–∞–µ—Ç –≤—Å–µ–º –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", exact_match=True
        )
        self.assertEqual(len(filtered), 1)
        self.assertEqual(filtered[0]["owner_id"], 2)
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç—Ä–µ—Ç—å–µ–º—É –∫–ª—é—á—É —Å –æ—á–∏—Å—Ç–∫–æ–π
        filtered = self.plugin.filter_posts_by_keyword_with_text_cleaning(
            posts, "–ü—Ä–∏–≤–µ—Ç —Ä–æ–¥–Ω–æ–π –ë—É—Ä—è—Ç–∏–∏ –æ—Ç —à—Ç—É—Ä–º–æ–≤–∏–∫–æ–≤ —Ç–∞–Ω–∫–æ–≤–æ–π –±—Ä–∏–≥–∞–¥—ã —Å –Æ–∂–Ω–æ-–î–æ–Ω–µ—Ü–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", exact_match=True
        )
        self.assertEqual(len(filtered), 1)
        self.assertEqual(filtered[0]["owner_id"], 3)
    
    def test_filter_posts_by_multiple_keywords(self):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        posts = [
            {"text": "–î–∞–∂–µ –≤ –±–æ–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —á–µ–ª–æ–≤–µ–∫ –æ—Å—Ç–∞—ë—Ç—Å—è —á–µ–ª–æ–≤–µ–∫–æ–º", "owner_id": 1, "id": 100},
            {"text": "–õ–∏—Å –ø–µ—Ä–µ–¥–∞–µ—Ç –≤—Å–µ–º –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "owner_id": 2, "id": 200},
            {"text": "–ü—Ä–∏–≤–µ—Ç —Ä–æ–¥–Ω–æ–π –ë—É—Ä—è—Ç–∏–∏", "owner_id": 3, "id": 300},
            {"text": "–û–±—ã—á–Ω—ã–π –ø–æ—Å—Ç –±–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤", "owner_id": 4, "id": 400},
        ]
        
        keywords = ["–î–∞–∂–µ –≤ –±–æ–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö", "–õ–∏—Å –ø–µ—Ä–µ–¥–∞–µ—Ç", "–ü—Ä–∏–≤–µ—Ç —Ä–æ–¥–Ω–æ–π"]
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫–ª—é—á–∞–º
        filtered = self.plugin.filter_posts_by_multiple_keywords(posts, keywords, exact_match=True, use_text_cleaning=True)
        self.assertEqual(len(filtered), 3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –ø–æ—Å—Ç—ã —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        owner_ids = [post["owner_id"] for post in filtered]
        self.assertIn(1, owner_ids)
        self.assertIn(2, owner_ids)
        self.assertIn(3, owner_ids)
        self.assertNotIn(4, owner_ids)  # –ü–æ—Å—Ç –±–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω
    
    def test_filter_posts_comprehensive(self):
        """–¢–µ—Å—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ñ—Ä–∞–∑–∞–º"""
        posts = [
            {"text": "–î–∞–∂–µ –≤ –±–æ–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —á–µ–ª–æ–≤–µ–∫ –æ—Å—Ç–∞—ë—Ç—Å—è —á–µ–ª–æ–≤–µ–∫–æ–º", "owner_id": 1, "id": 100},
            {"text": "–î–∞–∂–µ –≤ –±–æ–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —á–µ–ª–æ–≤–µ–∫ –æ—Å—Ç–∞—ë—Ç—Å—è —á–µ–ª–æ–≤–µ–∫–æ–º", "owner_id": 1, "id": 100},  # –î—É–±–ª–∏–∫–∞—Ç
            {"text": "–õ–∏—Å –ø–µ—Ä–µ–¥–∞–µ—Ç –≤—Å–µ–º –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "owner_id": 2, "id": 200},
            {"text": "–ü—Ä–∏–≤–µ—Ç —Ä–æ–¥–Ω–æ–π –ë—É—Ä—è—Ç–∏–∏", "owner_id": 3, "id": 300},
            {"text": "–û–±—ã—á–Ω—ã–π –ø–æ—Å—Ç –±–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤", "owner_id": 4, "id": 400},
        ]
        
        keywords = ["–î–∞–∂–µ –≤ –±–æ–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö", "–õ–∏—Å –ø–µ—Ä–µ–¥–∞–µ—Ç"]
        
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        filtered = self.plugin.filter_posts_comprehensive(
            posts=posts,
            keywords=keywords,
            exact_match=True,
            use_text_cleaning=True,
            remove_duplicates=True
        )
        
        # –î–æ–ª–∂–Ω–æ –Ω–∞–π—Ç–∏ 2 –ø–æ—Å—Ç–∞ (—Å —É—á–µ—Ç–æ–º —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
        self.assertEqual(len(filtered), 2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã
        owner_ids = [post["owner_id"] for post in filtered]
        self.assertIn(1, owner_ids)
        self.assertIn(2, owner_ids)
        self.assertNotIn(3, owner_ids)  # –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        self.assertNotIn(4, owner_ids)  # –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    
    def test_filter_without_keywords(self):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (—Ç–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)"""
        posts = [
            {"text": "–ü–æ—Å—Ç 1", "owner_id": 1, "id": 100},
            {"text": "–ü–æ—Å—Ç 1", "owner_id": 1, "id": 100},  # –î—É–±–ª–∏–∫–∞—Ç
            {"text": "–ü–æ—Å—Ç 2", "owner_id": 2, "id": 200},
        ]
        
        filtered = self.plugin.filter_posts_comprehensive(
            posts=posts,
            keywords=None,  # –ë–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            remove_duplicates=True
        )
        
        # –î–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è 2 –ø–æ—Å—Ç–∞ (—É–±—Ä–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç)
        self.assertEqual(len(filtered), 2)
    
    def test_filter_without_text_cleaning(self):
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
        posts = [
            {"text": "–î–∞–∂–µ –≤ –±–æ–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —á–µ–ª–æ–≤–µ–∫ –æ—Å—Ç–∞—ë—Ç—Å—è —á–µ–ª–æ–≤–µ–∫–æ–º. üéØ #–≤–æ–π–Ω–∞", "owner_id": 1, "id": 100},
            {"text": "–õ–∏—Å –ø–µ—Ä–µ–¥–∞–µ—Ç –≤—Å–µ–º –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è #—É—Ç—Ä–æ", "owner_id": 2, "id": 200},
        ]
        
        keywords = ["–î–∞–∂–µ –≤ –±–æ–µ–≤—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö —á–µ–ª–æ–≤–µ–∫ –æ—Å—Ç–∞—ë—Ç—Å—è —á–µ–ª–æ–≤–µ–∫–æ–º"]
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
        filtered = self.plugin.filter_posts_comprehensive(
            posts=posts,
            keywords=keywords,
            exact_match=True,
            use_text_cleaning=False,
            remove_duplicates=True
        )
        
        # –î–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ 1 –ø–æ—Å—Ç (–±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —ç–º–æ–¥–∑–∏ –∏ —Ö–µ—à—Ç–µ–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è)
        self.assertEqual(len(filtered), 1)
        self.assertEqual(filtered[0]["owner_id"], 1)


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    loader = unittest.TestLoader()
    suite = loader.loadTestsFromTestCase(TestFilterPlugin)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if result.wasSuccessful():
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"\n‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏: {len(result.failures)} failures, {len(result.errors)} errors")
        for failure in result.failures:
            print(f"FAILURE: {failure[0]}")
            print(f"  {failure[1]}")
        for error in result.errors:
            print(f"ERROR: {error[0]}")
            print(f"  {error[1]}")
    
    sys.exit(0 if result.wasSuccessful() else 1) 