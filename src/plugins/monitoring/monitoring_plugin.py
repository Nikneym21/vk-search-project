#!/usr/bin/env python3
"""
–ü–ª–∞–≥–∏–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
import time
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional

from ..base_plugin import BasePlugin
from ...core.event_system import EventType


class MonitoringPlugin(BasePlugin):
    """–ü–ª–∞–≥–∏–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        super().__init__()
        self.name = "MonitoringPlugin"
        self.version = "1.0.0"
        self.description = "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.config = {
            "enabled": True,
            "metrics_interval": 5,  # —Å–µ–∫—É–Ω–¥—ã
            "alert_thresholds": {
                "response_time": 2.0,  # —Å–µ–∫—É–Ω–¥—ã
                "rate_limit_hits": 10,  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                "cache_hit_rate": 0.3,  # 30%
                "error_rate": 0.1,  # 10%
                "memory_usage": 0.8  # 80%
            },
            "metrics_history_size": 100,
            "enable_alerts": True,
            "enable_dashboard": True
        }
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.metrics = {
            "response_times": [],
            "rate_limit_hits": 0,
            "cache_hit_rate": 0.0,
            "error_count": 0,
            "total_requests": 0,
            "memory_usage": 0.0,
            "cpu_usage": 0.0,
            "active_connections": 0
        }
        
        # –ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫
        self.metrics_history = []
        
        # –ê–ª–µ—Ä—Ç—ã
        self.alerts = []
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–¥–∞—á
        self.monitoring_task = None
        
    def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.log_info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        if not self.validate_config():
            self.log_error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if self.config["enabled"]:
            self.monitoring_task = asyncio.create_task(self._monitoring_loop())
            self.log_info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
        
        self.emit_event(EventType.PLUGIN_LOADED, {"status": "initialized"})
    
    def shutdown(self) -> None:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–≥–∏–Ω–∞"""
        self.log_info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–≥–∏–Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        if self.monitoring_task:
            self.monitoring_task.cancel()
        
        self.emit_event(EventType.PLUGIN_UNLOADED, {"status": "shutdown"})
    
    def validate_config(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return True
    
    def get_required_config_keys(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return []
    
    def get_plugin_manager(self):
        """–ü–æ–ª—É—á–∞–µ—Ç PluginManager"""
        return self.plugin_manager
    
    async def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while True:
            try:
                await self._collect_metrics()
                await self._check_alerts()
                await self._update_dashboard()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫
                self._save_metrics_history()
                
                await asyncio.sleep(self.config["metrics_interval"])
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                self.log_error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(5)
    
    async def _collect_metrics(self):
        """–°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
            plugin_manager = self.get_plugin_manager()
            if not plugin_manager:
                return
            
            # –ú–µ—Ç—Ä–∏–∫–∏ VKSearchPlugin
            vk_plugin = plugin_manager.get_plugin('vk_search')
            if vk_plugin:
                vk_stats = vk_plugin.get_statistics()
                if vk_stats:
                    self.metrics["response_times"] = vk_stats.get("performance_metrics", {}).get("average_response_time", 0.0)
                    self.metrics["rate_limit_hits"] = vk_stats.get("performance_metrics", {}).get("rate_limit_hits", 0)
                    
                    # –ú–µ—Ç—Ä–∏–∫–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
                    intelligent_cache = vk_stats.get("intelligent_caching", {})
                    if intelligent_cache:
                        self.metrics["cache_hit_rate"] = intelligent_cache.get("cache_hit_rate", 0.0)
                        self.metrics["total_requests"] = intelligent_cache.get("total_cache_requests", 0)
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            self.metrics["memory_usage"] = self._get_memory_usage()
            self.metrics["cpu_usage"] = self._get_cpu_usage()
            self.metrics["active_connections"] = self._get_active_connections()
            
            self.log_info(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã: RT={self.metrics['response_times']:.3f}s, "
                         f"Cache={self.metrics['cache_hit_rate']:.1%}, "
                         f"Memory={self.metrics['memory_usage']:.1%}")
            
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")
    
    async def _check_alerts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
        if not self.config["enable_alerts"]:
            return
        
        alerts = []
        thresholds = self.config["alert_thresholds"]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        if isinstance(self.metrics["response_times"], (int, float)) and self.metrics["response_times"] > thresholds["response_time"]:
            alerts.append(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {self.metrics['response_times']:.2f}s")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit hits
        if isinstance(self.metrics["rate_limit_hits"], (int, float)) and self.metrics["rate_limit_hits"] > thresholds["rate_limit_hits"]:
            alerts.append(f"üö® –ú–Ω–æ–≥–æ rate limit hits: {self.metrics['rate_limit_hits']}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ cache hit rate
        if isinstance(self.metrics["cache_hit_rate"], (int, float)) and self.metrics["cache_hit_rate"] < thresholds["cache_hit_rate"]:
            alerts.append(f"üìâ –ù–∏–∑–∫–∏–π cache hit rate: {self.metrics['cache_hit_rate']:.1%}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        if isinstance(self.metrics["memory_usage"], (int, float)) and self.metrics["memory_usage"] > thresholds["memory_usage"]:
            alerts.append(f"üíæ –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {self.metrics['memory_usage']:.1%}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç—ã
        for alert in alerts:
            self.log_warning(alert)
            self.alerts.append({
                "timestamp": datetime.now().isoformat(),
                "message": alert,
                "level": "warning"
            })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–µ—Ä—Ç–æ–≤
        if len(self.alerts) > 50:
            self.alerts = self.alerts[-50:]
    
    async def _update_dashboard(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞"""
        if not self.config["enable_dashboard"]:
            return
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞—à–±–æ—Ä–¥ –¥–∞–Ω–Ω—ã—Ö
        dashboard_data = {
            "timestamp": datetime.now().isoformat(),
            "metrics": self.metrics,
            "alerts": self.alerts[-10:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∞–ª–µ—Ä—Ç–æ–≤
            "status": "healthy" if not self.alerts else "warning"
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—à–±–æ—Ä–¥
        self._save_dashboard(dashboard_data)
    
    def _save_metrics_history(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫"""
        history_entry = {
            "timestamp": datetime.now().isoformat(),
            "metrics": self.metrics.copy()
        }
        
        self.metrics_history.append(history_entry)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.metrics_history) > self.config["metrics_history_size"]:
            self.metrics_history = self.metrics_history[-self.config["metrics_history_size"]:]
    
    def _save_dashboard(self, data: dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            with open("data/dashboard.json", "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: {e}")
    
    def _get_memory_usage(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            import psutil
            return psutil.virtual_memory().percent / 100.0
        except ImportError:
            return 0.0
    
    def _get_cpu_usage(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU"""
        try:
            import psutil
            return psutil.cpu_percent() / 100.0
        except ImportError:
            return 0.0
    
    def _get_active_connections(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        try:
            import psutil
            return len(psutil.net_connections())
        except ImportError:
            return 0
    
    def get_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return {
            "enabled": self.is_enabled(),
            "config": self.get_config(),
            "current_metrics": self.metrics,
            "alerts_count": len(self.alerts),
            "history_size": len(self.metrics_history),
            "dashboard_enabled": self.config["enable_dashboard"],
            "alerts_enabled": self.config["enable_alerts"]
        }
    
    def get_dashboard_data(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
        return {
            "timestamp": datetime.now().isoformat(),
            "metrics": self.metrics,
            "alerts": self.alerts[-10:],
            "history": self.metrics_history[-20:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π
            "status": "healthy" if not self.alerts else "warning"
        } 