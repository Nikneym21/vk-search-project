import os
import time
from collections import defaultdict, deque
from loguru import logger
from src.core.event_system import event_system, EventType
from src.plugins.base_plugin import BasePlugin
from datetime import datetime

class LoggerPlugin(BasePlugin):
    def __init__(self):
        super().__init__()
        self.name = "LoggerPlugin"
        self.version = "1.0.0"
        self.description = "–ü–ª–∞–≥–∏–Ω –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∏ –æ—à–∏–±–æ–∫ –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤"
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
        self.config = {
            "batch_logging": True,
            "batch_size": 50,
            "batch_timeout": 5.0,  # —Å–µ–∫—É–Ω–¥—ã
            "rate_limit": {
                "info": 10,      # –º–∞–∫—Å–∏–º—É–º –ª–æ–≥–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É
                "warning": 5,
                "error": 3,
                "debug": 20
            },
            "filter_patterns": [
                "cache-hit",      # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —á–∞—Å—Ç—ã–µ cache hits
                "rate_limit",     # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —á–∞—Å—Ç—ã–µ rate limits
                "progress"        # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ç—á–µ–π
            ],
            "high_volume_mode": False,
            "log_summary_interval": 30  # —Å–µ–∫—É–Ω–¥—ã
        }
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è batch –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.batch_logs = defaultdict(list)
        self.last_batch_time = defaultdict(float)
        self.rate_limit_counters = defaultdict(lambda: {"count": 0, "last_reset": time.time()})
        self.log_summary = {
            "total_logs": 0,
            "errors": 0,
            "warnings": 0,
            "info": 0,
            "debug": 0,
            "last_summary": time.time()
        }

    def initialize(self):
        event_system.subscribe(EventType.ERROR, self.on_error)
        event_system.subscribe("log_error", self.on_error)
        event_system.subscribe("log_warning", self.on_warning)
        event_system.subscribe("log_info", self.on_info)
        event_system.subscribe("log_debug", self.on_debug)
        event_system.subscribe("high_volume_mode", self.set_high_volume_mode)
        print("[LoggerPlugin] –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.")

    def shutdown(self):
        # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É
        self._print_log_summary()
        pass

    def set_high_volume_mode(self, enabled=True):
        """–í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        self.config["high_volume_mode"] = enabled
        if enabled:
            logger.info("üîß LoggerPlugin: –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
        else:
            logger.info("üîß LoggerPlugin: –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")

    def _should_log(self, level: str, message: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        current_time = time.time()
        
        # Rate limiting
        counter = self.rate_limit_counters[level]
        if current_time - counter["last_reset"] >= 1.0:
            counter["count"] = 0
            counter["last_reset"] = current_time
        
        if counter["count"] >= self.config["rate_limit"][level]:
            return False
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
        if self.config["high_volume_mode"]:
            for pattern in self.config["filter_patterns"]:
                if pattern in message.lower():
                    return False
        
        counter["count"] += 1
        return True

    def _batch_log(self, level: str, message: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ª–æ–≥ –≤ batch"""
        current_time = time.time()
        self.batch_logs[level].append({
            "message": message,
            "timestamp": current_time
        })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–≤–µ—Å—Ç–∏ batch
        if (len(self.batch_logs[level]) >= self.config["batch_size"] or 
            current_time - self.last_batch_time[level] >= self.config["batch_timeout"]):
            self._flush_batch(level)

    def _flush_batch(self, level: str):
        """–í—ã–≤–æ–¥–∏—Ç batch –ª–æ–≥–æ–≤"""
        if not self.batch_logs[level]:
            return
        
        logs = self.batch_logs[level]
        count = len(logs)
        
        if count == 1:
            # –û–¥–∏–Ω–æ—á–Ω—ã–π –ª–æ–≥
            logger.log(level.upper(), f"[LoggerPlugin] {logs[0]['message']}")
        else:
            # Batch –ª–æ–≥
            logger.log(level.upper(), f"[LoggerPlugin] Batch {count} {level} logs")
            for log in logs[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                logger.log(level.upper(), f"  - {log['message']}")
            if count > 3:
                logger.log(level.upper(), f"  ... –∏ –µ—â–µ {count - 3} –ª–æ–≥–æ–≤")
        
        # –û—á–∏—â–∞–µ–º batch
        self.batch_logs[level] = []
        self.last_batch_time[level] = time.time()

    def _update_log_summary(self, level: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –ª–æ–≥–æ–≤"""
        self.log_summary["total_logs"] += 1
        self.log_summary[level] += 1
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥
        current_time = time.time()
        if current_time - self.log_summary["last_summary"] >= self.config["log_summary_interval"]:
            self._print_log_summary()
            self.log_summary["last_summary"] = current_time

    def _print_log_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ª–æ–≥–æ–≤"""
        summary = self.log_summary
        logger.info(f"üìä –°–≤–æ–¥–∫–∞ –ª–æ–≥–æ–≤: {summary['total_logs']} –≤—Å–µ–≥–æ "
                   f"(error: {summary['errors']}, warning: {summary['warnings']}, "
                   f"info: {summary['info']}, debug: {summary['debug']})")

    def on_error(self, data):
        if self._should_log("error", str(data)):
            if self.config["batch_logging"]:
                self._batch_log("error", str(data))
            else:
                logger.error(f"[LoggerPlugin] {data}")
            self._update_log_summary("errors")

    def on_warning(self, data):
        if self._should_log("warning", str(data)):
            if self.config["batch_logging"]:
                self._batch_log("warning", str(data))
            else:
                logger.warning(f"[LoggerPlugin] {data}")
            self._update_log_summary("warnings")

    def on_info(self, data):
        if self._should_log("info", str(data)):
            if self.config["batch_logging"]:
                self._batch_log("info", str(data))
            else:
                logger.info(f"[LoggerPlugin] {data}")
            self._update_log_summary("info")

    def on_debug(self, data):
        if self._should_log("debug", str(data)):
            if self.config["batch_logging"]:
                self._batch_log("debug", str(data))
            else:
                logger.debug(f"[LoggerPlugin] {data}")
            self._update_log_summary("debug") 