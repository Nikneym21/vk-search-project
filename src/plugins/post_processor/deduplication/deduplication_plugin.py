"""
–ü–ª–∞–≥–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ—Å—Ç–æ–≤
"""

from typing import Dict, List, Any, Optional
from datetime import datetime
import asyncio

from src.core.event_system import EventType
from src.plugins.base_plugin import BasePlugin


class DeduplicationPlugin(BasePlugin):
    """–ü–ª–∞–≥–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ—Å—Ç–æ–≤"""
    
    def __init__(self):
        super().__init__()
        self.name = "DeduplicationPlugin"
        self.version = "1.0.0"
        self.description = "–ü–ª–∞–≥–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ—Å—Ç–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.config = {
            "deduplication_method": "link_hash",  # link_hash, text, content_hash
            "enable_logging": True,
            "batch_size": 1000
        }
        
        # –°–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ –ø–ª–∞–≥–∏–Ω–∞–º–∏
        self.database_plugin = None
    
    def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞"""
        self.log_info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ Deduplication")
        
        if not self.validate_config():
            self.log_error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞")
            return
        
        self.log_info("–ü–ª–∞–≥–∏–Ω Deduplication –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.emit_event(EventType.PLUGIN_LOADED, {"status": "initialized"})
    
    def shutdown(self) -> None:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–≥–∏–Ω–∞"""
        self.log_info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–≥–∏–Ω–∞ Deduplication")
        
        self.emit_event(EventType.PLUGIN_UNLOADED, {"status": "shutdown"})
        self.log_info("–ü–ª–∞–≥–∏–Ω Deduplication –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def validate_config(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        method = self.config.get("deduplication_method")
        valid_methods = ["link_hash", "text", "content_hash"]
        return method in valid_methods
    
    def get_required_config_keys(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return ["deduplication_method"]
    
    def get_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞–≥–∏–Ω–∞"""
        return {
            "enabled": self.is_enabled(),
            "config": self.get_config(),
            "method": self.config.get("deduplication_method")
        }

    def remove_duplicates_by_link_hash(self, posts: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ—Å—Ç–æ–≤ –ø–æ —Ö–µ—à—É —Å—Å—ã–ª–∫–∏
        
        Args:
            posts: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        """
        if not posts:
            return []
        
        seen = set()
        unique = []
        duplicates_count = 0
        
        for post in posts:
            link = post.get('link')
            if link:
                import hashlib
                link_hash = hashlib.md5(link.encode('utf-8')).hexdigest()
                
                if link_hash not in seen:
                    seen.add(link_hash)
                    unique.append(post)
                else:
                    duplicates_count += 1
        
        self.log_info(f"–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ link_hash: {len(posts)} -> {len(unique)} (—É–¥–∞–ª–µ–Ω–æ {duplicates_count})")
        return unique

    def remove_duplicates_by_text(self, posts: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ—Å—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É
        
        Args:
            posts: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        """
        if not posts:
            return []
        
        seen = set()
        unique = []
        duplicates_count = 0
        
        for post in posts:
            text = self._extract_post_text(post)
            if text:
                text_hash = hash(text.lower().strip())
                if text_hash not in seen:
                    seen.add(text_hash)
                    unique.append(post)
                else:
                    duplicates_count += 1
        
        self.log_info(f"–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É: {len(posts)} -> {len(unique)} (—É–¥–∞–ª–µ–Ω–æ {duplicates_count})")
        return unique

    def remove_duplicates_by_content_hash(self, posts: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ—Å—Ç–æ–≤ –ø–æ —Ö–µ—à—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö)
        
        Args:
            posts: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        """
        if not posts:
            return []
        
        seen = set()
        unique = []
        duplicates_count = 0
        
        for post in posts:
            # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            text = self._extract_post_text(post)
            owner_id = post.get('owner_id', 0)
            date = post.get('date', 0)
            
            content_string = f"{text}_{owner_id}_{date}"
            content_hash = hash(content_string.lower().strip())
            
            if content_hash not in seen:
                seen.add(content_hash)
                unique.append(post)
            else:
                duplicates_count += 1
        
        self.log_info(f"–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ content_hash: {len(posts)} -> {len(unique)} (—É–¥–∞–ª–µ–Ω–æ {duplicates_count})")
        return unique

    def remove_duplicates(self, posts: List[Dict[str, Any]], method: str = None) -> List[Dict[str, Any]]:
        """
        –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—è —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        
        Args:
            posts: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            method: –ú–µ—Ç–æ–¥ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ (post_id, text, content_hash)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        """
        if not posts:
            return []
        
        if method is None:
            method = self.config.get("deduplication_method", "post_id")
        
        self.log_info(f"–ó–∞–ø—É—Å–∫ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ {len(posts)} –ø–æ—Å—Ç–æ–≤ –º–µ—Ç–æ–¥–æ–º: {method}")
        
        if method == "post_id":
            return self.remove_duplicates_by_post_id(posts)
        elif method == "text":
            return self.remove_duplicates_by_text(posts)
        elif method == "content_hash":
            return self.remove_duplicates_by_content_hash(posts)
        else:
            self.log_error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {method}")
            return posts

    async def remove_duplicates_parallel(self, posts: List[Dict[str, Any]], method: str = None) -> List[Dict[str, Any]]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        
        Args:
            posts: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            method: –ú–µ—Ç–æ–¥ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        """
        if not posts:
            return []
        
        if method is None:
            method = self.config.get("deduplication_method", "post_id")
        
        self.log_info(f"üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è {len(posts)} –ø–æ—Å—Ç–æ–≤ –º–µ—Ç–æ–¥–æ–º: {method}")
        
        # –î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if len(posts) < 1000:
            return self.remove_duplicates(posts, method)
        
        # –î–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        batch_size = self.config.get("batch_size", 1000)
        tasks = []
        
        for i in range(0, len(posts), batch_size):
            batch = posts[i:i + batch_size]
            task = self._process_batch_parallel(batch, method)
            tasks.append(task)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        all_unique_posts = []
        for result in results:
            all_unique_posts.extend(result)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        final_unique = self.remove_duplicates(all_unique_posts, method)
        
        self.log_info(f"‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(posts)} -> {len(final_unique)}")
        return final_unique

    async def _process_batch_parallel(self, batch: List[Dict[str, Any]], method: str) -> List[Dict[str, Any]]:
        """
        –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ –ø–æ—Å—Ç–æ–≤
        """
        try:
            return self.remove_duplicates(batch, method)
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞: {e}")
            return batch

    def _extract_post_text(self, post: Dict[str, Any]) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å—Ç–∞
        """
        text = post.get('text', '')
        if not text:
            text = post.get('message', '')
        if not text:
            text = post.get('content', '')
        
        return text

    def get_duplicate_statistics(self, posts: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å—Ç–æ–≤
        
        Args:
            posts: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        if not posts:
            return {
                "total": 0,
                "unique_by_link_hash": 0,
                "unique_by_text": 0,
                "unique_by_content_hash": 0,
                "duplicates_by_link_hash": 0,
                "duplicates_by_text": 0,
                "duplicates_by_content_hash": 0
            }
        
        total = len(posts)
        unique_by_link_hash = len(self.remove_duplicates_by_link_hash(posts))
        unique_by_text = len(self.remove_duplicates_by_text(posts))
        unique_by_content_hash = len(self.remove_duplicates_by_content_hash(posts))
        
        return {
            "total": total,
            "unique_by_link_hash": unique_by_link_hash,
            "unique_by_text": unique_by_text,
            "unique_by_content_hash": unique_by_content_hash,
            "duplicates_by_link_hash": total - unique_by_link_hash,
            "duplicates_by_text": total - unique_by_text,
            "duplicates_by_content_hash": total - unique_by_content_hash
        }
    
    def set_database_plugin(self, database_plugin):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–≤—è–∑—å —Å –ø–ª–∞–≥–∏–Ω–æ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.database_plugin = database_plugin
        self.log_info("DatabasePlugin –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ DeduplicationPlugin")
    
    def clean_duplicates_from_database(self, task_id: int = None) -> int:
        """
        –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Å—ã–ª–∫–∞–º
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏ (None –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á)
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        """
        if not self.database_plugin:
            self.log_error("DatabasePlugin –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return 0
        
        try:
            # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            duplicates = self.database_plugin.find_duplicates(task_id)
            
            if not duplicates:
                self.log_info("–î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return 0
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π)
            removed_count = 0
            cursor = self.database_plugin.connection.cursor()
            
            for duplicate_group in duplicates:
                if len(duplicate_group) > 1:
                    # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç, —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
                    for duplicate in duplicate_group[1:]:
                        cursor.execute('DELETE FROM posts WHERE id = ?', (duplicate['id'],))
                        removed_count += 1
            
            self.database_plugin.connection.commit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á–∏
            if task_id:
                self.database_plugin._update_task_statistics(task_id)
            
            self.log_info(f"–£–¥–∞–ª–µ–Ω–æ {removed_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ –ë–î")
            return removed_count
            
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ –ë–î: {e}")
            return 0
    
    def get_database_duplicate_statistics(self, task_id: int = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏ (None –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        if not self.database_plugin:
            self.log_error("DatabasePlugin –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return {}
        
        try:
            duplicates = self.database_plugin.find_duplicates(task_id)
            
            total_duplicates = 0
            duplicate_groups = 0
            
            for duplicate_group in duplicates:
                if len(duplicate_group) > 1:
                    duplicate_groups += 1
                    total_duplicates += len(duplicate_group) - 1  # -1 –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–¥–∏–Ω –æ—Å—Ç–∞–≤–ª—è–µ–º
            
            return {
                "duplicate_groups": duplicate_groups,
                "total_duplicates": total_duplicates,
                "method": "link_hash"
            }
            
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
            return {} 