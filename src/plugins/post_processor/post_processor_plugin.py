"""
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–ª–∞–≥–∏–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
"""

from typing import Dict, List, Any, Optional
from datetime import datetime
import asyncio

from src.core.event_system import EventType
from src.plugins.base_plugin import BasePlugin


class PostProcessorPlugin(BasePlugin):
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–ª–∞–≥–∏–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"""
    
    def __init__(self):
        super().__init__()
        self.name = "PostProcessorPlugin"
        self.version = "1.0.0"
        self.description = "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–ª–∞–≥–∏–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è + –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è)"
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.config = {
            "enable_filtering": True,
            "enable_deduplication": True,
            "filter_method": "keywords",  # keywords, exact_match
            "deduplication_method": "link_hash",  # link_hash, text, content_hash
            "processing_order": ["deduplication", "filtering"],  # –ü–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            "batch_size": 1000,
            "enable_logging": True
        }
        
        # –°–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ –ø–ª–∞–≥–∏–Ω–∞–º–∏
        self.filter_plugin = None
        self.deduplication_plugin = None
        self.database_plugin = None
    
    def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞"""
        self.log_info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ PostProcessor")
        
        if not self.validate_config():
            self.log_error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞")
            return
        
        self.log_info("–ü–ª–∞–≥–∏–Ω PostProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.emit_event(EventType.PLUGIN_LOADED, {"status": "initialized"})
    
    def shutdown(self) -> None:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–≥–∏–Ω–∞"""
        self.log_info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–≥–∏–Ω–∞ PostProcessor")
        
        self.emit_event(EventType.PLUGIN_UNLOADED, {"status": "shutdown"})
        self.log_info("–ü–ª–∞–≥–∏–Ω PostProcessor –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def validate_config(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return True
    
    def get_required_config_keys(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return []
    
    def get_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞–≥–∏–Ω–∞"""
        return {
            "enabled": self.is_enabled(),
            "config": self.get_config(),
            "plugins_connected": {
                "filter": self.filter_plugin is not None,
                "deduplication": self.deduplication_plugin is not None,
                "database": self.database_plugin is not None
            }
        }
    
    def set_filter_plugin(self, filter_plugin):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–≤—è–∑—å —Å –ø–ª–∞–≥–∏–Ω–æ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        self.filter_plugin = filter_plugin
        self.log_info("FilterPlugin –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ PostProcessorPlugin")
    
    def set_deduplication_plugin(self, deduplication_plugin):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–≤—è–∑—å —Å –ø–ª–∞–≥–∏–Ω–æ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏"""
        self.deduplication_plugin = deduplication_plugin
        self.log_info("DeduplicationPlugin –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ PostProcessorPlugin")
    
    def set_database_plugin(self, database_plugin):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–≤—è–∑—å —Å –ø–ª–∞–≥–∏–Ω–æ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.database_plugin = database_plugin
        self.log_info("DatabasePlugin –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ PostProcessorPlugin")
    
    def process_posts(self, posts: List[Dict[str, Any]], 
                     keywords: List[str] = None, 
                     exact_match: bool = True,
                     remove_duplicates: bool = True,
                     processing_order: List[str] = None) -> Dict[str, Any]:
        """
        –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
        
        Args:
            posts: –°–ø–∏—Å–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            exact_match: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            remove_duplicates: –£–¥–∞–ª—è—Ç—å –ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
            processing_order: –ü–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ['deduplication', 'filtering']
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        if not posts:
            return {
                "original_count": 0,
                "final_count": 0,
                "filtered_count": 0,
                "duplicates_removed": 0,
                "processing_time": 0,
                "final_posts": []
            }
        
        start_time = datetime.now()
        original_count = len(posts)
        current_posts = posts.copy()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if processing_order is None:
            processing_order = self.config.get("processing_order", ["deduplication", "filtering"])
        
        self.log_info(f"üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {original_count} –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
        self.log_info(f"üìã –ü–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_order}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        duplicates_removed = 0
        if remove_duplicates and "deduplication" in processing_order:
            if self.deduplication_plugin:
                before_count = len(current_posts)
                current_posts = self.deduplication_plugin.remove_duplicates_by_link_hash(current_posts)
                duplicates_removed = before_count - len(current_posts)
                self.log_info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {duplicates_removed} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
            else:
                self.log_warning("DeduplicationPlugin –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        filtered_count = 0
        if keywords and "filtering" in processing_order:
            if self.filter_plugin:
                before_count = len(current_posts)
                current_posts = self.filter_plugin.filter_posts_by_multiple_keywords(
                    current_posts, keywords, exact_match
                )
                filtered_count = before_count - len(current_posts)
                self.log_info(f"üîç –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {filtered_count} –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
            else:
                self.log_warning("FilterPlugin –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_time = (datetime.now() - start_time).total_seconds()
        
        result = {
            "original_count": original_count,
            "final_count": len(current_posts),
            "filtered_count": filtered_count,
            "duplicates_removed": duplicates_removed,
            "processing_time": processing_time,
            "final_posts": current_posts,
            "processing_order": processing_order
        }
        
        self.log_info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {original_count} -> {len(current_posts)} "
                     f"(–¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {duplicates_removed}, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {filtered_count})")
        
        return result
    
    def process_posts_from_database(self, task_id: int,
                                  keywords: List[str] = None,
                                  exact_match: bool = True,
                                  remove_duplicates: bool = True) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏
            keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            exact_match: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            remove_duplicates: –£–¥–∞–ª—è—Ç—å –ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        if not self.database_plugin:
            self.log_error("DatabasePlugin –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return {}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑ –ë–î
            posts = self.database_plugin.get_task_posts(task_id)
            
            if not posts:
                self.log_info(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
                return {"task_id": task_id, "posts_count": 0}
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            result = self.process_posts(posts, keywords, exact_match, remove_duplicates)
            result["task_id"] = task_id
            
            return result
            
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏–∑ –ë–î: {e}")
            return {}
    
    def clean_database_task(self, task_id: int,
                          keywords: List[str] = None,
                          exact_match: bool = True) -> Dict[str, int]:
        """
        –û—á–∏—Å—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ + –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö)
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏
            keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
            exact_match: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ—á–∏—Å—Ç–∫–∏
        """
        if not self.database_plugin:
            self.log_error("DatabasePlugin –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return {}
        
        results = {
            "duplicates_removed": 0,
            "invalid_posts_removed": 0,
            "total_cleaned": 0
        }
        
        try:
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            if self.deduplication_plugin:
                results["duplicates_removed"] = self.deduplication_plugin.clean_duplicates_from_database(task_id)
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if keywords and self.filter_plugin:
                results["invalid_posts_removed"] = self.filter_plugin.clean_by_parsing_parameters(
                    task_id, keywords, exact_match
                )
            
            results["total_cleaned"] = results["duplicates_removed"] + results["invalid_posts_removed"]
            
            self.log_info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–¥–∞—á–∏ {task_id}: {results}")
            return results
            
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∑–∞–¥–∞—á–∏: {e}")
            return results
    
    def get_processing_statistics(self, task_id: int = None) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        Args:
            task_id: ID –∑–∞–¥–∞—á–∏ (None –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á)
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        stats = {
            "filter_plugin_connected": self.filter_plugin is not None,
            "deduplication_plugin_connected": self.deduplication_plugin is not None,
            "database_plugin_connected": self.database_plugin is not None
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        if self.deduplication_plugin:
            stats["duplicates"] = self.deduplication_plugin.get_database_duplicate_statistics(task_id)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        if self.filter_plugin:
            stats["filtering"] = self.filter_plugin.get_statistics()
        
        return stats 