"""
–ü–ª–∞–≥–∏–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É –∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
"""

from typing import Dict, List, Any, Optional
from datetime import datetime
import asyncio
import re

from ...core.event_system import EventType
from ..base_plugin import BasePlugin


class TextFilterPlugin(BasePlugin):
    """–ü–ª–∞–≥–∏–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É –∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    
    def __init__(self):
        super().__init__()
        self.name = "TextFilterPlugin"
        self.version = "1.0.0"
        self.description = "–ü–ª–∞–≥–∏–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –ø–æ —Ç–µ–∫—Å—Ç—É –∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º —Å –æ—á–∏—Å—Ç–∫–æ–π —Ç–µ–∫—Å—Ç–∞"
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.config = {
            "enable_text_cleaning": True,
            "enable_exact_match": True,
            "min_text_length": 3,
            "max_text_length": 10000,
            "case_sensitive": False,
            "enable_regex": False
        }
    
    def initialize(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞"""
        self.log_info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ TextFilter")
        
        if not self.validate_config():
            self.log_error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞")
            return
        
        self.log_info("–ü–ª–∞–≥–∏–Ω TextFilter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        self.emit_event(EventType.PLUGIN_LOADED, {"status": "initialized"})
    
    def shutdown(self) -> None:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–≥–∏–Ω–∞"""
        self.log_info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–≥–∏–Ω–∞ TextFilter")
        
        self.emit_event(EventType.PLUGIN_UNLOADED, {"status": "shutdown"})
        self.log_info("–ü–ª–∞–≥–∏–Ω TextFilter –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def validate_config(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        min_length = self.config.get("min_text_length", 3)
        max_length = self.config.get("max_text_length", 10000)
        return min_length <= max_length
    
    def get_required_config_keys(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return []
    
    def get_statistics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞–≥–∏–Ω–∞"""
        return {
            "enabled": self.is_enabled(),
            "config": self.get_config()
        }

    def _extract_post_text(self, post: Dict[str, Any]) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å—Ç–∞
        """
        text = post.get('text', '')
        if not text:
            text = post.get('message', '')
        if not text:
            text = post.get('content', '')
        
        return text

    def _clean_text(self, text: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        """
        if not text:
            return ""
        
        # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        text = re.sub(r'[^\w\s]', ' ', text)
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = re.sub(r'\s+', ' ', text).strip()
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –µ—Å–ª–∏ –Ω–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
        if not self.config.get("case_sensitive", False):
            text = text.lower()
        
        return text

    def _check_keyword_match(self, text: str, keyword: str, exact_match: bool) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            keyword: –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
            exact_match: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (True) –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ (False)
            
        Returns:
            True –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, False –∏–Ω–∞—á–µ
        """
        if not text or not keyword:
            return False
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if self.config.get("enable_text_cleaning", True):
            cleaned_text = self._clean_text(text)
        else:
            cleaned_text = text
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        if not self.config.get("case_sensitive", False):
            keyword_lower = keyword.lower()
        else:
            keyword_lower = keyword
        
        if exact_match:
            # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–≤–∫–ª—é—á–∞—è –≥—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤)
            pattern = r'\b' + re.escape(keyword_lower) + r'\b'
            return bool(re.search(pattern, cleaned_text))
        else:
            # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            return keyword_lower in cleaned_text

    def filter_posts_by_keyword(self, posts: List[Dict[str, Any]], keyword: str, exact_match: bool = True) -> List[Dict[str, Any]]:
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
        
        Args:
            posts: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            keyword: –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞
            exact_match: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (True) –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ (False)
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        """
        if not posts:
            return []
        
        filtered_posts = []
        
        for post in posts:
            text = self._extract_post_text(post)
            if self._check_keyword_match(text, keyword, exact_match):
                filtered_posts.append(post)
        
        self.log_info(f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É '{keyword}': {len(posts)} -> {len(filtered_posts)}")
        return filtered_posts

    def filter_posts_by_multiple_keywords(self, posts: List[Dict[str, Any]], keywords: List[str], 
                                        exact_match: bool = True, match_all: bool = False) -> List[Dict[str, Any]]:
        """
        –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        
        Args:
            posts: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            keywords: –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            exact_match: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (True) –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ (False)
            match_all: True - –ø–æ—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, False - —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        """
        if not posts or not keywords:
            return []
        
        filtered_posts = []
        
        for post in posts:
            text = self._extract_post_text(post)
            matches = 0
            
            for keyword in keywords:
                if self._check_keyword_match(text, keyword, exact_match):
                    matches += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
            if match_all:
                # –ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                if matches == len(keywords):
                    filtered_posts.append(post)
            else:
                # –ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
                if matches > 0:
                    filtered_posts.append(post)
        
        self.log_info(f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ {len(keywords)} –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {len(posts)} -> {len(filtered_posts)}")
        return filtered_posts

    async def filter_posts_parallel(self, posts: List[Dict[str, Any]], keywords: List[str], 
                                  exact_match: bool = True, match_all: bool = False) -> List[Dict[str, Any]]:
        """
        –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        
        Args:
            posts: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            keywords: –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            exact_match: –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (True) –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ (False)
            match_all: True - –ø–æ—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, False - —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ
            
        Returns:
            –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        """
        if not posts or not keywords:
            return []
        
        self.log_info(f"üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è {len(posts)} –ø–æ—Å—Ç–æ–≤ –ø–æ {len(keywords)} –∫–ª—é—á–∞–º")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        tasks = []
        chunk_size = max(1, len(posts) // 10)
        
        for i in range(0, len(posts), chunk_size):
            chunk = posts[i:i + chunk_size]
            task = self._process_chunk_parallel(chunk, keywords, exact_match, match_all)
            tasks.append(task)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*tasks)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        filtered_posts = []
        for result in results:
            filtered_posts.extend(result)
        
        self.log_info(f"‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(posts)} -> {len(filtered_posts)}")
        return filtered_posts

    async def _process_chunk_parallel(self, chunk: List[Dict[str, Any]], keywords: List[str], 
                                    exact_match: bool, match_all: bool) -> List[Dict[str, Any]]:
        """
        –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ –ø–æ—Å—Ç–æ–≤
        """
        filtered_chunk = []
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ —á–∞–Ω–∫–µ
        post_tasks = []
        for post in chunk:
            task = self._process_single_post_parallel(post, keywords, exact_match, match_all)
            post_tasks.append(task)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        results = await asyncio.gather(*post_tasks, return_exceptions=True)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for result in results:
            if isinstance(result, dict) and result:
                filtered_chunk.append(result)
            elif isinstance(result, Exception):
                self.log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞: {result}")
        
        return filtered_chunk

    async def _process_single_post_parallel(self, post: Dict[str, Any], keywords: List[str], 
                                          exact_match: bool, match_all: bool) -> Optional[Dict[str, Any]]:
        """
        –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        """
        try:
            text = self._extract_post_text(post)
            if not text:
                return None
            
            matches = 0
            for keyword in keywords:
                if self._check_keyword_match(text, keyword, exact_match):
                    matches += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
            if match_all:
                # –ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                if matches == len(keywords):
                    return post
            else:
                # –ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
                if matches > 0:
                    return post
            
            return None
            
        except Exception as e:
            self.log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞: {e}")
            return None

    def get_keyword_statistics(self, posts: List[Dict[str, Any]], keywords: List[str], 
                             exact_match: bool = True) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        
        Args:
            posts: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            keywords: –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        if not posts or not keywords:
            return {
                "total_posts": 0,
                "keywords": {},
                "total_matches": 0
            }
        
        keyword_stats = {}
        total_matches = 0
        
        for keyword in keywords:
            matches = 0
            for post in posts:
                text = self._extract_post_text(post)
                if self._check_keyword_match(text, keyword, exact_match):
                    matches += 1
            
            keyword_stats[keyword] = matches
            total_matches += matches
        
        return {
            "total_posts": len(posts),
            "keywords": keyword_stats,
            "total_matches": total_matches
        } 