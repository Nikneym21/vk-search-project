"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è–º–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import os
import importlib
import inspect
from typing import Dict, List, Any, Optional
from pathlib import Path
from loguru import logger

from ..plugins.base_plugin import BasePlugin


class PluginManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞–º–∏"""
    
    def __init__(self):
        self.plugins: Dict[str, BasePlugin] = {}
        self.plugin_configs: Dict[str, Dict[str, Any]] = {}
        
    def load_plugins(self, plugins_dir: str = "src/plugins") -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        plugins_path = Path(plugins_dir)
        
        if not plugins_path.exists():
            logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–ª–∞–≥–∏–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {plugins_dir}")
            return
            
        for plugin_dir in plugins_path.iterdir():
            if plugin_dir.is_dir() and not plugin_dir.name.startswith('_'):
                self._load_plugin(plugin_dir)
        # –Ø–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ LoggerPlugin
        try:
            from src.plugins.logger.logger_plugin import LoggerPlugin
            logger_plugin = LoggerPlugin()
            logger_plugin.initialize()
            self.plugins['logger'] = logger_plugin
            logger.info("LoggerPlugin –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"LoggerPlugin –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: {e}")
    
    def _load_plugin(self, plugin_dir: Path) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–ª–∞–≥–∏–Ω"""
        plugin_name = plugin_dir.name
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –ø–ª–∞–≥–∏–Ω–∞
            module_path = f"src.plugins.{plugin_name}.{plugin_name}_plugin"
            module = importlib.import_module(module_path)
            
            # –ò—â–µ–º –∫–ª–∞—Å—Å –ø–ª–∞–≥–∏–Ω–∞
            for name, obj in inspect.getmembers(module):
                if (inspect.isclass(obj) and 
                    issubclass(obj, BasePlugin) and 
                    obj != BasePlugin):
                    
                    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–≥–∏–Ω–∞
                    plugin_instance = obj()
                    self.plugins[plugin_name] = plugin_instance
                    
                    logger.info(f"–ü–ª–∞–≥–∏–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {plugin_name} -> {type(plugin_instance).__name__}")
                    break
            else:
                logger.warning(f"–ö–ª–∞—Å—Å –ø–ª–∞–≥–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {plugin_name}")
                
        except ImportError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ {plugin_name}: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–≥–∏–Ω–∞ {plugin_name}: {e}")
    
    def get_plugin(self, name: str) -> Optional[BasePlugin]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–ª–∞–≥–∏–Ω –ø–æ –∏–º–µ–Ω–∏"""
        return self.plugins.get(name)
    
    def get_logger(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è –ø–ª–∞–≥–∏–Ω–æ–≤"""
        from loguru import logger
        return logger
    
    def get_all_plugins(self) -> Dict[str, BasePlugin]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã"""
        return self.plugins.copy()
    
    def execute_plugin_method(self, plugin_name: str, method_name: str, *args, **kwargs) -> Any:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–µ—Ç–æ–¥ –ø–ª–∞–≥–∏–Ω–∞"""
        plugin = self.get_plugin(plugin_name)
        if not plugin:
            raise ValueError(f"–ü–ª–∞–≥–∏–Ω {plugin_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if not hasattr(plugin, method_name):
            raise AttributeError(f"–ú–µ—Ç–æ–¥ {method_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–ª–∞–≥–∏–Ω–µ {plugin_name}")
        
        method = getattr(plugin, method_name)
        return method(*args, **kwargs)
    
    def initialize_plugins(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã"""
        for name, plugin in self.plugins.items():
            try:
                plugin.initialize()
                logger.info(f"–ü–ª–∞–≥–∏–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {name}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–∞ {name}: {e}")
    
    def shutdown_plugins(self) -> None:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤"""
        for name, plugin in self.plugins.items():
            try:
                plugin.shutdown()
                logger.info(f"–ü–ª–∞–≥–∏–Ω –∑–∞–≤–µ—Ä—à–µ–Ω: {name}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞–≥–∏–Ω–∞ {name}: {e}")
    
    async def coordinate_search_and_filter(self, keywords: List[str], start_date: str, end_date: str, 
                                        exact_match: bool = True, minus_words: List[str] = None) -> List[Dict[str, Any]]:
        """
        –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        """
        import time
        from datetime import datetime
        
        start_time = time.time()
        logger = self.get_logger()
        
        try:
            logger.info(f"üöÄ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è {len(keywords)} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º VKSearchPlugin
            vk_plugin = self.get_plugin('vk_search')
            if not vk_plugin:
                raise ValueError("VKSearchPlugin –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ TokenManagerPlugin
            token_manager = self.get_plugin('token_manager')
            if not token_manager:
                raise ValueError("TokenManagerPlugin –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º VK —Ç–æ–∫–µ–Ω
            token = token_manager.get_token("vk")
            if not token:
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
                try:
                    with open("config/vk_token.txt", 'r', encoding='utf-8') as f:
                        lines = f.readlines()
                        for line in lines:
                            line = line.strip()
                            if line and not line.startswith('#') and not line.startswith('//'):
                                token = line
                                break
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞: {e}")
            
            if not token:
                raise ValueError("–¢–æ–∫–µ–Ω VK –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ TokenManager, –Ω–∏ –≤ —Ñ–∞–π–ª–µ")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ VKSearchPlugin
            vk_plugin.config["access_token"] = token
            logger.info("–¢–æ–∫–µ–Ω VK —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ VKSearchPlugin")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã - –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–∞—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
            if isinstance(start_date, str) and len(start_date.split()) == 1:
                start_date = f"{start_date} 00:00"
            if isinstance(end_date, str) and len(end_date.split()) == 1:
                end_date = f"{end_date} 23:59"
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏
            all_tokens = token_manager.list_vk_tokens()
            if not all_tokens:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞
                all_tokens = [token]
            
            logger.info(f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏: {len(all_tokens)}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã (–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, —Ç–æ–∫–µ–Ω) —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ç–æ–∫–µ–Ω–æ–≤
            keyword_token_pairs = []
            for i, keyword in enumerate(keywords):
                token_index = i % len(all_tokens)
                selected_token = all_tokens[token_index]
                keyword_token_pairs.append((keyword, selected_token))
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(keyword_token_pairs)} –ø–∞—Ä (–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, —Ç–æ–∫–µ–Ω) —Å —Ä–æ—Ç–∞—Ü–∏–µ–π")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            raw_posts = await vk_plugin.mass_search_with_tokens(
                keyword_token_pairs, start_date, end_date, exact_match, minus_words
            )
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(raw_posts)} —Å—ã—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤ –æ—Ç VK API")
            
            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            filter_plugin = self.get_plugin('filter')
            if not filter_plugin:
                raise ValueError("FilterPlugin –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
            filtered_posts = await filter_plugin.filter_posts_comprehensive_parallel(
                raw_posts, keywords, exact_match
            )
            
            execution_time = time.time() - start_time
            logger.info(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_posts)} –ø–æ—Å—Ç–æ–≤ –∑–∞ {execution_time:.2f} —Å–µ–∫")
            
            return filtered_posts
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
            return []
    
    def _format_search_results(self, posts: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        from datetime import datetime
        
        formatted_results = []
        for post in posts:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
            owner_id = post.get('owner_id', 0)
            post_id = post.get('id', 0)
            text = post.get('text', '')
            date = post.get('date', 0)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            if date:
                dt = datetime.fromtimestamp(date)
                formatted_date = dt.strftime("%H:%M %d.%m.%Y")
            else:
                formatted_date = ""
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            likes = post.get('likes', {})
            comments = post.get('comments', {})
            reposts = post.get('reposts', {})
            views = post.get('views', {})
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            likes_count = likes.get('count', 0) if isinstance(likes, dict) else likes
            comments_count = comments.get('count', 0) if isinstance(comments, dict) else comments
            reposts_count = reposts.get('count', 0) if isinstance(reposts, dict) else reposts
            views_count = views.get('count', 0) if isinstance(views, dict) else views
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
            if owner_id < 0:
                author_link = f"https://vk.com/club{abs(owner_id)}"
            else:
                author_link = f"https://vk.com/id{owner_id}"
            
            formatted_post = {
                "link": f"https://vk.com/wall{owner_id}_{post_id}",
                "text": text,
                "type": "–ü–æ—Å—Ç",
                "author": post.get('author_name', ''),
                "author_link": author_link,
                "date": formatted_date,
                "likes": likes_count,
                "comments": comments_count,
                "reposts": reposts_count,
                "views": views_count
            }
            formatted_results.append(formatted_post)
        
        return formatted_results 